{"version":3,"file":"ts-3dtiles.umd.js","sources":["../../src/utils/io/writeDefinedProperty.ts","../../src/utils/io/writeExtensionsProperty.ts","../../src/gltf/core/def/gltf-property-base.ts","../../src/gltf/core/def/enum/gltf-version.ts","../../src/gltf/core/def/enum/gltf-attribute-type.ts","../../src/gltf/core/def/gltf-asset.ts","../../src/gltf/core/def/enum/gltf-component-type.ts","../../src/gltf/core/def/enum/gltf-alphamode.ts","../../src/gltf/core/def/enum/gltf-filter.ts","../../src/gltf/core/def/enum/gltf-wrapmode.ts","../../src/gltf/core/def/enum/gltf-primitivemode.ts","../../src/gltf/core/def/enum/gltf-vertex-attribute-type.ts","../../src/gltf/core/def/enum/mime.ts","../../src/gltf/core/def/gltf-accessor-sparse-indices.ts","../../src/gltf/core/def/gltf-accessor-sparse-values.ts","../../src/gltf/core/def/gltf-accessor-sparse.ts","../../src/gltf/core/def/gltf-accessor.ts","../../node_modules/base64-arraybuffer/lib/base64-arraybuffer.js","../../src/gltf/core/def/enum/gltf-bufferview-target.ts","../../src/gltf/core/def/gltf-buffer.ts","../../src/gltf/core/def/gltf-bufferview.ts","../../src/gltf/core/def/gltf-scene.ts","../../src/gltf/core/def/gltf-node.ts","../../src/gltf/core/def/gltf-primitive-attribute.ts","../../src/gltf/core/def/gltf-primitive.ts","../../src/gltf/core/def/gltf-mesh.ts","../../src/gltf/core/def/gltf-texture-info.ts","../../src/gltf/core/def/gltf-normal-texture-info.ts","../../src/gltf/core/def/gltf-pbr.ts","../../src/gltf/core/def/gltf-material.ts","../../src/gltf/core/def/gltf-texture.ts","../../node_modules/iobuffer/src/text-encoding-polyfill.js","../../node_modules/iobuffer/src/utf8.browser.ts","../../node_modules/iobuffer/src/IOBuffer.ts","../../src/gltf/core/def/enum/gltf-animation-channel-target-path.ts","../../src/gltf/core/def/gltf-image.ts","../../src/gltf/core/def/gltf-sampler.ts","../../src/gltf/core/def/gltf-animation-channel-target.ts","../../src/gltf/core/def/gltf-animation-channel.ts","../../src/gltf/core/def/enum/gltf-animation-interpolation.ts","../../src/gltf/core/def/gltf-animation-sampler.ts","../../src/gltf/core/def/gltf-animation.ts","../../src/gltf/core/def/enum/gltf-cameratype.ts","../../src/gltf/core/def/gltf-orthographic-camera.ts","../../src/gltf/core/def/gltf-perspective-camera.ts","../../src/gltf/core/def/gltf-camera.ts","../../src/gltf/core/def/gltf-skin.ts","../../src/gltf/core/gltf-document.ts","../../src/gltf/ext/gltf-extension-base.ts","../../src/gltf/io/read-util/read-gltf.ts","../../src/utils/array-minmax.ts","../../src/gltf/io/builder-api/gltf-vertex-buffer-object.ts","../../src/tileset/ext/ext-base.ts","../../src/tileset/core/def/tile-header-base.ts","../../src/tileset/core/def/tile-b3dm/header.ts","../../src/tileset/core/def/enum/featuretable-type.ts","../../src/tileset/core/def/enum/tile-refine.ts","../../src/tileset/core/def/featuretable/featuretable-base.ts","../../src/tileset/core/def/featuretable/featuretable-b3dm.ts","../../src/tileset/core/def/batchtable/batchtable-base.ts","../../src/tileset/core/def/tile-i3dm/header.ts","../../src/tileset/core/def/featuretable/featuretable-i3dm.ts","../../src/tileset/core/def/tile-pnts/header.ts","../../src/tileset/core/def/featuretable/featuretable-pnts.ts","../../src/tileset/core/def/featuretable/featuretable-vctr.ts","../../src/index.ts","../../src/tileset/core/def/asset.ts","../../src/tileset/core/def/tile-b3dm/index.ts","../../src/tileset/core/def/tile-cmpt/index.ts","../../src/tileset/ext/ext-batchtable-hierarchy.ts","../../src/tileset/ext/ext-content-gltf.ts","../../src/gltf/ext/khr/ext-draco.ts","../../src/gltf/ext/vdr/ext-geometry-metadata.ts","../../src/tileset/ext/ext-implicit-tiling.ts","../../src/tileset/ext/ext-layers.ts","../../src/gltf/ext/vdr/ext-lod.ts","../../src/gltf/ext/vdr/ext-materials-thin-transparency.ts","../../src/gltf/ext/vdr/ext-meshopt-compression.ts","../../src/tileset/ext/ext-metadata.ts","../../src/tileset/ext/ext-multiple-content.ts","../../src/gltf/ext/khr/ext-pbr-specular-glossiness.ts","../../src/tileset/ext/ext-pnts-draco.ts","../../src/gltf/ext/vdr/ext-primitive-outline.ts","../../src/gltf/ext/vdr/ext-texture-dds.ts","../../src/gltf/ext/vdr/ext-texture-webp.ts","../../src/gltf/io/write-action/gltf-add-action.ts","../../src/gltf/io/write-action/gltf-drop-action.ts","../../src/gltf/core/def/gltf-occlusion-texture-info.ts","../../src/gltf/io/builder-api/gltf-primitive-builder.ts","../../src/gltf/io/write-action/gltf-update-action.ts","../../src/gltf/io/write-action/action-data/gltf-vertex-attributes.ts","../../src/gltf/io/write-action/action-data/gltf-vertex-buffer.ts","../../src/gltf/io/write-action/action-data/gltf-vertex-indices.ts","../../src/tileset/core/def/tile-i3dm/index.ts","../../src/tileset/core/def/tile-pnts/index.ts","../../src/tileset/core/def/property.ts","../../src/tileset/core/def/tile.ts","../../src/tileset/core/def/tile-bounding-volume.ts","../../src/tileset/core/def/tile-content.ts","../../src/tileset/core/def/tileset.ts","../../src/gltf/io/read-util/read-glb.ts"],"sourcesContent":["function writeDefinedProperty(obj: any, name: string, data: any) {\n  if (data !== undefined)\n    Object.defineProperty(obj, name, {\n      value: data,\n      enumerable: true,\n      writable: true,\n      configurable: true,\n    });\n}\n\nexport default writeDefinedProperty;\n","import { GLTFExtensionBase } from \"src/gltf\";\r\n\r\nfunction writeExtensionsProperty(obj: any, exts?: Set<GLTFExtensionBase>) {\r\n  if (exts !== undefined) {\r\n    const extObj = {}\r\n    const _ = [...exts]\r\n    _.forEach(ext => {\r\n      Object.defineProperty(extObj, ext.name, {\r\n        value: ext.json()\r\n      })\r\n    })\r\n    Object.defineProperty(obj, 'extensions', {\r\n      value: extObj\r\n    })\r\n  }\r\n}\r\n\r\nexport default writeExtensionsProperty","import { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { ISerializable, IValidate } from \"src/interfaces\"\r\nimport GLTFDocument from \"../gltf-document\"\r\n\r\nexport default class GLTFPropertyBase implements IValidate, ISerializable {\r\n  extensions?: Set<GLTFExtensionBase>\r\n  extras?: any\r\n  protected _doc?: GLTFDocument\r\n  get doc() {\r\n    return this._doc\r\n  }\r\n  set doc(doc) {\r\n    this._doc = doc\r\n  }\r\n  \r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    return {}\r\n  }\r\n}","enum GLTFVersion {\r\n  TWO = \"2.0\",\r\n  ONE = \"1.0\"\r\n}\r\n\r\nexport const GLTFVersionValues = Object.freeze(Object.values(GLTFVersion) as Array<string>)\r\n\r\nexport default GLTFVersion","enum GLTFAttributeType {\r\n  SCALAR = \"SCALAR\",\r\n  VEC2 = \"VEC2\",\r\n  VEC3 = \"VEC3\",\r\n  VEC4 = \"VEC4\",\r\n  MAT2 = \"MAT2\",\r\n  MAT3 = \"MAT3\",\r\n  MAT4 = \"MAT4\",\r\n}\r\n\r\nexport const GLTFAttributeTypeValues = Object.freeze(Object.values(GLTFAttributeType) as Array<string>)\r\n\r\nexport const getAttributeTypeElementCount = (t: GLTFAttributeType): number => {\r\n  switch (t) {\r\n    case GLTFAttributeType.VEC2:\r\n      return 2\r\n    case GLTFAttributeType.VEC3:\r\n      return 3\r\n    case GLTFAttributeType.VEC4:\r\n    case GLTFAttributeType.MAT2:\r\n      return 4\r\n    case GLTFAttributeType.MAT3:\r\n      return 9\r\n    case GLTFAttributeType.MAT4:\r\n      return 16\r\n    default: // means SCALAR\r\n      return 1\r\n  }\r\n}\r\n\r\nexport default GLTFAttributeType","import { IGLTFAsset } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFVersion, { GLTFVersionValues } from \"./enum/gltf-version\"\r\n\r\nclass GLTFAsset extends GLTFPropertyBase {\r\n  version: GLTFVersion = GLTFVersion.TWO\r\n  generator?: string\r\n  copyright?: string\r\n  minVersion?: GLTFVersion\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n  json() {\r\n    const asset = {\r\n      version: this.version\r\n    }\r\n    writeDefinedProperty(asset, 'generator', this.generator)\r\n    writeDefinedProperty(asset, 'minVersion', this.minVersion)\r\n    writeDefinedProperty(asset, 'copyright', this.copyright)\r\n    writeDefinedProperty(asset, 'extensions', this.generator)\r\n    writeDefinedProperty(asset, 'extras', this.extras)\r\n\r\n    return asset\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAsset): GLTFAsset {\r\n    const asset = new GLTFAsset()\r\n    if (GLTFVersionValues.includes(json.version)) {\r\n      asset.version = json.version as GLTFVersion\r\n    } else {\r\n      throw new Error(`[GLTFAsset.readFromJson()] 参数 version：${json.version} 不合法，请检查`)\r\n    }\r\n\r\n    if (json.minVersion !== undefined) {\r\n      if (GLTFVersionValues.includes(json.minVersion))\r\n        asset.minVersion = json.version as GLTFVersion\r\n      else\r\n        throw new Error(`[GLTFAsset.readFromJson()] 参数 minVersion: ${json.minVersion} 不合法，请检查`)\r\n    }\r\n    asset.copyright = json.copyright\r\n    asset.generator = json.generator\r\n    asset.extras = json.extras\r\n    return asset\r\n  }\r\n}\r\n\r\nexport default GLTFAsset","enum GLTFComponentType {\n  BYTE = 5120,\n  UNSIGNED_BYTE = 5121,\n  SHORT = 5122,\n  UNSIGNED_SHORT = 5123,\n  UNSIGNED_INT = 5125,\n  FLOAT = 5126,\n}\n\nexport const GLTFComponentTypeValues = Object.freeze(\n  Object.values(GLTFComponentType) as Array<number>\n);\n\nexport const getComponentTypeByteSize = (t: GLTFComponentType): number => {\n  switch (t) {\n    case GLTFComponentType.BYTE:\n    case GLTFComponentType.UNSIGNED_BYTE:\n      return 1;\n    case GLTFComponentType.SHORT:\n    case GLTFComponentType.UNSIGNED_SHORT:\n      return 2;\n    case GLTFComponentType.UNSIGNED_INT:\n      return 4;\n    default:\n      // means FLOAT 32bit 5126 - glTF 里没有 8 位浮点数\n      return 4;\n  }\n};\n\nexport default GLTFComponentType;\n","/**\r\n * @enum {GLTFAlphaMode} 透明度模式\r\n */\r\nenum GLTFAlphaMode {\r\n  /** \r\n   * @description 不透明。默认选项。\r\n   */\r\n  OPAQUE = \"OPAQUE\",\r\n  /**\r\n   * @description 透明度取决于 alphaCutOff 值，即半透明\r\n   */\r\n  MASK = \"MASK\",\r\n  /**\r\n   * @description 混合模式\r\n   */\r\n  BLEND = \"BLEND\"\r\n}\r\n\r\nexport const GLTFAlphaModeValues = Object.freeze(Object.values(GLTFAlphaMode) as Array<string>)\r\n\r\nexport default GLTFAlphaMode","enum GLTFFilter {\r\n  NEAREST = 9728,\r\n  LINEAR = 9729,\r\n  NEAREST_MIPMAP_NEAREST = 9984,\r\n  LINEAR_MIPMAP_NEAREST = 9985,\r\n  NEAREST_MIPMAP_LINEAR = 9986,\r\n  LINEAR_MIPMAP_LINEAR = 9987\r\n}\r\n\r\nexport const GLTFFilterValues = Object.freeze(Object.values(GLTFFilter) as Array<number>)\r\n\r\nexport default GLTFFilter","enum GLTFWrapMode {\r\n  REPEAT = 10497,\r\n  CLAMP_TO_EDGE = 33071,\r\n  MIRRORED_REPEAT = 33648,\r\n}\r\n\r\nexport const GLTFWrapModeValues = Object.freeze(Object.values(GLTFWrapMode) as Array<number>)\r\n\r\nexport default GLTFWrapMode","enum GLTFPrimitiveMode {\r\n  POINTS = 0,\r\n  LINES = 1,\r\n  LINE_LOOP = 2,\r\n  LINE_STRIP = 3,\r\n  TRIANGLES = 4,\r\n  TRIANGLE_STRIP = 5,\r\n  TRIANGLE_FAN = 6\r\n}\r\n\r\nexport const GLTFPrimitiveModeValues = Object.freeze(Object.values(GLTFPrimitiveMode) as Array<number>)\r\n\r\nexport default GLTFPrimitiveMode","enum GLTFVertexAttributeType {\r\n  POSITION = \"position\",\r\n  UV0 = \"uv0\",\r\n  UV1 = \"uv1\",\r\n  COLOR0 = \"color0\",\r\n  TANGENT = \"tangent\",\r\n  NORMAL = \"normal\",\r\n  JOINTS0 = \"joints0\",\r\n  WEIGHTS0 = \"weights0\",\r\n  BATCHID = \"batchid\"\r\n}\r\n\r\nexport default GLTFVertexAttributeType","enum MIME {\r\n  JPG = \"image/jpg\",\r\n  JPEG = \"image/jpeg\",\r\n  PNG = \"image/png\",\r\n  WEBP = \"image/webp\",\r\n  DDS = \"image/vnd-ms.dds\",\r\n}\r\n\r\nexport const MIMEValues = Object.freeze(Object.values(MIME) as string[])\r\n\r\nexport default MIME","import { IGLTFAccessorSparseIndices } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport { GLTFComponentType } from \"./enum\"\r\nimport { GLTFComponentTypeValues } from \"./enum/gltf-component-type\"\r\n\r\nclass GLTFAccessorSparseIndices extends GLTFPropertyBase {\r\n  bufferView: number\r\n  byteOffset: number\r\n  componentType: GLTFComponentType\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    if (\r\n      this.componentType !== GLTFComponentType.UNSIGNED_BYTE &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_INT &&\r\n      this.componentType !== GLTFComponentType.UNSIGNED_SHORT\r\n    ) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseIndices json()] 此 accessor.sparse.indices 的属性不合法，请检查')\r\n    }\r\n\r\n    const i = {\r\n      bufferView: this.bufferView,\r\n      byteOffset: this.byteOffset,\r\n      componentType: this.componentType,\r\n    }\r\n\r\n    writeExtensionsProperty(i, this.extensions)\r\n    writeDefinedProperty(i, 'extras', this.extras)\r\n\r\n    return i\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAccessorSparseIndices) {\r\n    const accSparseIndices = new GLTFAccessorSparseIndices()\r\n\r\n    accSparseIndices.extras = json.extras\r\n    accSparseIndices.bufferView = json.bufferView\r\n    accSparseIndices.byteOffset = json.byteOffset\r\n    if (GLTFComponentTypeValues.includes(json.componentType)) {\r\n      accSparseIndices.componentType = json.componentType as GLTFComponentType\r\n    }\r\n\r\n    return accSparseIndices\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseIndices","import { IGLTFAccessorSparseValues } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nclass GLTFAccessorSparseValues extends GLTFPropertyBase {\r\n  bufferView: number\r\n  byteOffset?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    if (this.byteOffset && this.byteOffset < 0) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparseValues json()] 此 accessor.sparse.values 的属性不合法，请检查')\r\n    }\r\n\r\n    const v = {\r\n      bufferView: this.bufferView\r\n    }\r\n\r\n    writeDefinedProperty(v, 'byteOffset', this.byteOffset)\r\n    writeExtensionsProperty(v, this.extensions)\r\n    writeDefinedProperty(v, 'extras', this.extras)\r\n\r\n    return v\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAccessorSparseValues) {\r\n    const vals = new GLTFAccessorSparseValues()\r\n\r\n    vals.bufferView = json.bufferView\r\n    vals.byteOffset = json.byteOffset\r\n    vals.extras = json.extras\r\n\r\n    return vals\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparseValues","import { IGLTFAccessorSparse } from \"src/interfaces/IGLTFObj\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFAccessorSparseIndices from \"./gltf-accessor-sparse-indices\"\r\nimport GLTFAccessorSparseValues from \"./gltf-accessor-sparse-values\"\r\n\r\nclass GLTFAccessorSparse extends GLTFPropertyBase {\r\n  count: number\r\n  indices: GLTFAccessorSparseIndices\r\n  values: GLTFAccessorSparseValues\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return this.count > 0 && this.values.validate() && this.indices.validate()\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAccessorSparse json()] 此 sparse 对象属性不合法，请检查属性')\r\n    }\r\n\r\n    const spr = {\r\n      count: this.count,\r\n      indices: this.indices.json(),\r\n      values: this.values.json()\r\n    }\r\n\r\n    return spr\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAccessorSparse) {\r\n    const sparse = new GLTFAccessorSparse()\r\n    sparse.indices = GLTFAccessorSparseIndices.readFromJson(json.indices)\r\n    sparse.values = GLTFAccessorSparseValues.readFromJson(json.values)\r\n    sparse.extras = json.extras\r\n\r\n    return sparse\r\n  }\r\n}\r\n\r\nexport default GLTFAccessorSparse","import { IGLTFAccessor } from \"src/interfaces/IGLTFObj\";\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\";\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\";\nimport GLTFPropertyBase from \"./gltf-property-base\";\nimport { GLTFAttributeType, GLTFComponentType } from \"./enum\";\nimport { GLTFAttributeTypeValues } from \"./enum/gltf-attribute-type\";\nimport { GLTFComponentTypeValues } from \"./enum/gltf-component-type\";\nimport GLTFAccessorSparse from \"./gltf-accessor-sparse\";\n\nclass GLTFAccessor extends GLTFPropertyBase {\n  componentType: GLTFComponentType;\n  count: number;\n  type: GLTFAttributeType;\n  max?: number[];\n  min?: number[];\n  sparse?: GLTFAccessorSparse;\n  name?: string;\n  normalized?: boolean;\n  bufferView?: number;\n  byteOffset?: number;\n\n  constructor() {\n    super();\n  }\n\n  validate() {\n    /** byteOffset 和 bufferView 必须同时存在 */\n    const offsetExist = this.byteOffset === undefined ? 1 : 0;\n    const viewExist = this.bufferView === undefined ? 1 : 0;\n    if (offsetExist + viewExist === 1) {\n      return false;\n    }\n    if (this.byteOffset && this.byteOffset < 0) {\n      return false;\n    }\n    return true;\n  }\n\n  json() {\n    if (!this.validate()) {\n      throw new Error(\"[GLTFAccessor json()] 当前 accessor 属性不合法，请检查\");\n    }\n\n    const acc = {\n      componentType: this.componentType,\n      type: this.type,\n      count: this.count,\n    };\n\n    writeDefinedProperty(acc, \"max\", this.max);\n    writeDefinedProperty(acc, \"min\", this.min);\n    writeDefinedProperty(acc, \"name\", this.name);\n    writeDefinedProperty(acc, \"normalized\", this.normalized);\n    writeDefinedProperty(\n      acc,\n      \"sparse\",\n      this.sparse !== undefined ? this.sparse.json() : undefined\n    );\n    writeDefinedProperty(acc, \"bufferView\", this.bufferView);\n    writeDefinedProperty(acc, \"byteOffset\", this.byteOffset);\n    writeExtensionsProperty(acc, this.extensions);\n    writeDefinedProperty(acc, \"extras\", this.extras);\n\n    return acc;\n  }\n\n  static fromJson(json: IGLTFAccessor) {\n    const acc = new GLTFAccessor();\n    if (GLTFComponentTypeValues.includes(json.componentType)) {\n      acc.componentType = json.componentType as GLTFComponentType;\n    } else {\n      throw new Error(\"[GLTFAccessor.readFromJson()] 属性 componentType 非法\");\n    }\n    acc.count = json.count;\n    if (GLTFAttributeTypeValues.includes(json.type)) {\n      acc.type = json[\"type\"] as GLTFAttributeType;\n    } else {\n      throw new Error(\"[readGLTF() readAccessors()] 属性 type 非法\");\n    }\n    acc.max = json.max;\n    acc.min = json.min;\n    if (json.sparse !== undefined) {\n      acc.sparse = GLTFAccessorSparse.readFromJson(json.sparse);\n    }\n    acc.normalized = json.normalized;\n    acc.bufferView = json.bufferView;\n    acc.byteOffset = json.byteOffset;\n    acc.name = json.name;\n    acc.extras = json.extras;\n    return acc;\n  }\n}\n\nexport default GLTFAccessor;\n","/*\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n(function(){\n  \"use strict\";\n\n  var chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  // Use a lookup table to find the index.\n  var lookup = new Uint8Array(256);\n  for (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n  }\n\n  exports.encode = function(arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer),\n    i, len = bytes.length, base64 = \"\";\n\n    for (i = 0; i < len; i+=3) {\n      base64 += chars[bytes[i] >> 2];\n      base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n      base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n      base64 += chars[bytes[i + 2] & 63];\n    }\n\n    if ((len % 3) === 2) {\n      base64 = base64.substring(0, base64.length - 1) + \"=\";\n    } else if (len % 3 === 1) {\n      base64 = base64.substring(0, base64.length - 2) + \"==\";\n    }\n\n    return base64;\n  };\n\n  exports.decode =  function(base64) {\n    var bufferLength = base64.length * 0.75,\n    len = base64.length, i, p = 0,\n    encoded1, encoded2, encoded3, encoded4;\n\n    if (base64[base64.length - 1] === \"=\") {\n      bufferLength--;\n      if (base64[base64.length - 2] === \"=\") {\n        bufferLength--;\n      }\n    }\n\n    var arraybuffer = new ArrayBuffer(bufferLength),\n    bytes = new Uint8Array(arraybuffer);\n\n    for (i = 0; i < len; i+=4) {\n      encoded1 = lookup[base64.charCodeAt(i)];\n      encoded2 = lookup[base64.charCodeAt(i+1)];\n      encoded3 = lookup[base64.charCodeAt(i+2)];\n      encoded4 = lookup[base64.charCodeAt(i+3)];\n\n      bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n      bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n      bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n\n    return arraybuffer;\n  };\n})();\n","enum GLTFBufferViewTarget {\r\n  ARRAY_BUFFER = 34962,\r\n  ELEMENT_ARRAY_BUFFER = 34963\r\n}\r\n\r\nexport const GLTFBufferViewTargetValues = Object.freeze(Object.values(GLTFBufferViewTarget) as Array<number>)\r\n\r\nexport default GLTFBufferViewTarget","import { decode } from 'base64-arraybuffer'\r\nimport { IGLTFBuffer } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nfunction isDataUrl(str: string) {\r\n  return str.startsWith('data:')\r\n}\r\n\r\nclass GLTFBuffer extends GLTFPropertyBase {\r\n  byteLength: number = 0\r\n  uri?: string\r\n  bufferData?: ArrayBuffer\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  /** @deprecated */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return this.byteLength > 0\r\n  }\r\n\r\n  json() {\r\n    const bf = {\r\n      byteLength: this.byteLength\r\n    }\r\n    writeDefinedProperty(bf, 'uri', this.uri)\r\n    writeExtensionsProperty(bf, this.extensions)\r\n    writeDefinedProperty(bf, 'extras', this.extras)\r\n\r\n    return bf\r\n  }\r\n\r\n  static fromJson(json: IGLTFBuffer) {\r\n    const bf = new GLTFBuffer()\r\n    bf.uri = json.uri\r\n    if (bf.uri && isDataUrl(bf.uri)) {\r\n      bf.bufferData = decode(bf.uri.substr(bf.uri.indexOf(',') + 1))\r\n    }\r\n    bf.byteLength = json.byteLength\r\n    bf.extras = json.extras\r\n    // extensions 单独处理\r\n    return bf\r\n  }\r\n}\r\n\r\nexport default GLTFBuffer","import { IGLTFBufferView } from \"src/interfaces/IGLTFObj\";\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\";\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\";\nimport GLTFPropertyBase from \"./gltf-property-base\";\nimport GLTFBufferViewTarget, {\n  GLTFBufferViewTargetValues,\n} from \"./enum/gltf-bufferview-target\";\n\nclass GLTFBufferView extends GLTFPropertyBase {\n  buffer: number = 0;\n  byteLength: number = 1;\n  byteOffset?: number = 0;\n  byteStride?: number = 4;\n  target?: GLTFBufferViewTarget;\n\n  constructor() {\n    super();\n  }\n\n  validate() {\n    if (this.buffer < 0) {\n      return false;\n    }\n    if (this.byteLength < 1) {\n      return false;\n    }\n    if (this.byteOffset && this.byteOffset < 0) {\n      return false;\n    }\n    if (\n      this.byteStride &&\n      (this.byteStride % 4 !== 0 ||\n        this.byteStride > 252 ||\n        this.byteStride < 4)\n    ) {\n      return false;\n    }\n    return true;\n  }\n\n  json() {\n    if (!this.validate()) {\n      throw new Error(\n        \"[GLTFBufferView json()] 当前 bufferView 属性不合法，请检查\"\n      );\n    }\n\n    const bv = {\n      buffer: this.buffer,\n      byteLength: this.byteLength,\n    };\n\n    if (\n      this.target === GLTFBufferViewTarget.ARRAY_BUFFER ||\n      this.target === GLTFBufferViewTarget.ELEMENT_ARRAY_BUFFER\n    ) {\n      writeDefinedProperty(bv, \"target\", this.target);\n    }\n    writeDefinedProperty(bv, \"byteOffset\", this.byteOffset);\n    if (this.byteStride !== 4) {\n      writeDefinedProperty(bv, \"byteStride\", this.byteStride);\n    }\n    writeExtensionsProperty(bv, this.extensions);\n    writeDefinedProperty(bv, \"extras\", this.extras);\n\n    return bv;\n  }\n\n  static fromJson(json: IGLTFBufferView) {\n    const bv = new GLTFBufferView();\n    bv.buffer = json.buffer;\n    bv.byteLength = json.byteLength;\n    bv.byteOffset = json.byteOffset;\n    bv.extras = json.extras;\n    if (\n      json.target !== undefined &&\n      GLTFBufferViewTargetValues.includes(json.target)\n    ) {\n      bv.target = json.target as GLTFBufferViewTarget;\n    }\n    return bv;\n  }\n}\n\nexport default GLTFBufferView;\n","import { IGLTFScene } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nclass GLTFScene extends GLTFPropertyBase {\r\n  nodes: number[] = []\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return this.nodes.length > 1\r\n  }\r\n\r\n  json() {\r\n    const s = {\r\n      nodes: this.nodes\r\n    }\r\n    writeDefinedProperty(s, 'name', this.name)\r\n    writeExtensionsProperty(s, this.extensions)\r\n    return s\r\n  }\r\n\r\n  static fromJson(json: IGLTFScene) {\r\n    const scene = new GLTFScene()\r\n    scene.name = json.name\r\n    scene.nodes = json.nodes\r\n    scene.extras = json.extras\r\n    return scene\r\n  }\r\n}\r\n\r\nexport default GLTFScene","import { IGLTFNode } from \"src/interfaces/IGLTFObj\";\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\";\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\";\nimport GLTFPropertyBase from \"./gltf-property-base\";\n\nfunction validateTransforms(nd: GLTFNode) {\n  let flag = true;\n  if (nd.matrix !== undefined) {\n    if (\n      nd.rotation !== undefined ||\n      nd.scale !== undefined ||\n      nd.translation !== undefined\n    ) {\n      flag = false;\n    }\n  } else if (\n    nd.rotation === undefined &&\n    nd.scale === undefined &&\n    nd.translation === undefined\n  ) {\n    flag = false;\n  }\n\n  if (nd.rotation) {\n    flag = nd.rotation.every((r) => r > 1 || r < -1);\n  }\n\n  return flag;\n}\n\nclass GLTFNode extends GLTFPropertyBase {\n  children: number[] = [];\n  mesh?: number;\n  rotation?: [number, number, number, number];\n  translation?: [number, number, number];\n  weights?: number[];\n  name?: string;\n  skin?: number;\n  camera?: number;\n  matrix?: [\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number,\n    number\n  ];\n  scale?: [number, number, number];\n\n  constructor() {\n    super();\n  }\n\n  getMesh() {\n    if (this.doc === undefined) {\n      return null;\n    }\n    if (this.mesh === undefined) {\n      return null;\n    } else if (this.doc.meshes.length < this.mesh) {\n      return null;\n    }\n\n    return this.doc.meshes[this.mesh];\n  }\n\n  validate() {\n    if (!validateTransforms(this)) {\n      return false;\n    }\n    if (this.weights && this.weights.length < 1) {\n      return false;\n    } else if (this.weights !== undefined && this.mesh === undefined) {\n      return false;\n    }\n    if (this.skin !== undefined && this.mesh === undefined) {\n      return false;\n    }\n\n    if (this.children && this.children.length > 1) {\n      if (new Set(this.children).size !== this.children.length) return false;\n    }\n    return true;\n  }\n\n  json() {\n    if (!this.validate()) {\n      throw new Error(\"[GLTFNode json()] 当前 node 属性不合法，请检查属性\");\n    }\n\n    const n = {};\n\n    writeDefinedProperty(n, \"mesh\", this.mesh);\n    writeDefinedProperty(n, \"rotation\", this.rotation);\n    writeDefinedProperty(n, \"translation\", this.translation);\n    writeDefinedProperty(n, \"scale\", this.scale);\n    const m = this.matrix;\n    if (m) {\n      if (!(m[0] === 1 && m[5] === 1 && m[10] === 1 && m[15] === 1)) {\n        writeDefinedProperty(n, \"matrix\", this.matrix);\n      }\n    }\n    writeDefinedProperty(n, \"weights\", this.weights);\n    writeDefinedProperty(n, \"skin\", this.skin);\n    writeDefinedProperty(n, \"camera\", this.camera);\n    writeDefinedProperty(n, \"name\", this.name);\n\n    if (this.children && this.children.length !== 0) {\n      writeDefinedProperty(n, \"children\", this.children);\n    }\n    writeExtensionsProperty(n, this.extensions);\n    writeDefinedProperty(n, \"extras\", this.extras);\n\n    return n;\n  }\n\n  static fromJson(json: IGLTFNode) {\n    const node = new GLTFNode();\n    node.name = json.name;\n    node.mesh = json.mesh;\n    node.matrix = json.matrix;\n    node.rotation = json.rotation;\n    node.scale = json.scale;\n    node.skin = json.skin;\n    node.children = json.children;\n    node.weights = json.weights;\n    node.translation = json.translation;\n    node.camera = json.camera;\n    node.extras = json.extras;\n    return node;\n  }\n}\n\nexport default GLTFNode;\n","import { IGLTFPrimitiveAttribute } from \"src/interfaces/IGLTFObj\"\r\nimport ISerializable from \"src/interfaces/ISerializable\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport IValidate from \"../../../interfaces/IValidate\"\r\n\r\nclass GLTFPrimitiveAttribute implements IValidate, ISerializable {\r\n\r\n  position: number\r\n  uv0?: number\r\n  uv1?: number\r\n  color0?: number\r\n  normal?: number\r\n  tangent?: number\r\n  joints0?: number\r\n  weights0?: number\r\n  /** 3rd */\r\n  _batchid?: number\r\n\r\n  static fromJson(json: IGLTFPrimitiveAttribute): GLTFPrimitiveAttribute {\r\n    const attr = new GLTFPrimitiveAttribute()\r\n    attr.position = json.POSITION\r\n    attr.uv0 = json.TEXCOORD_0\r\n    attr.uv1 = json.TEXCOORD_1\r\n    attr.color0 = json.COLOR_0\r\n    attr.normal = json.NORMAL\r\n    attr.tangent = json.TANGENT\r\n    attr.joints0 = json.JOINTS_0\r\n    attr.weights0 = json.WEIGHTS_0\r\n    attr._batchid = json._BATCHID\r\n    return attr\r\n  }\r\n\r\n  validate() {\r\n    return Object.values(this).every(k => k! < 0)\r\n  }\r\n\r\n  json() {\r\n    const attr = {\r\n      POSITION: this.position,\r\n    }\r\n    writeDefinedProperty(attr, 'NORMAL', this.normal)\r\n    writeDefinedProperty(attr, 'TANGENT', this.tangent)\r\n    writeDefinedProperty(attr, 'TEXCOORD_0', this.uv0)\r\n    writeDefinedProperty(attr, 'TEXCOORD_1', this.uv1)\r\n    writeDefinedProperty(attr, 'COLOR_0', this.color0)\r\n    writeDefinedProperty(attr, 'JOINTS_0', this.joints0)\r\n    writeDefinedProperty(attr, 'WEIGHTS_0', this.weights0)\r\n    writeDefinedProperty(attr, '_BATCHID', this._batchid)\r\n\r\n    return attr\r\n  }\r\n}\r\n\r\nexport default GLTFPrimitiveAttribute","import { IGLTFPrimitive } from \"src/interfaces/IGLTFObj\";\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\";\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\";\nimport GLTFPropertyBase from \"./gltf-property-base\";\nimport GLTFPrimitiveMode, {\n  GLTFPrimitiveModeValues,\n} from \"./enum/gltf-primitivemode\";\nimport GLTFPrimitiveAttribute from \"./gltf-primitive-attribute\";\n\nclass GLTFPrimitive extends GLTFPropertyBase {\n  attributes: GLTFPrimitiveAttribute = new GLTFPrimitiveAttribute();\n  indices?: number;\n  material?: number;\n  mode?: GLTFPrimitiveMode = GLTFPrimitiveMode.TRIANGLES;\n\n  constructor() {\n    super();\n  }\n\n  /**\n   * 获取对应顶点属性的访问器\n   * @param {string} attrName 顶点属性名，允许值是：\n   * `'uv0'` | `'uv'`(等同uv0) | `'uv1'` | `'color0'` | `'color'` |\n   * `'normal'` | `'tangent'` | `'joints0'` | `'joints'` | `'weights0'` |\n   * `'weights'` | `'_batchid'` | `'batchid'`\n   *\n   * 大写小写均可，例如 `'UV0'` 和 `'uv'`、`'uv0'` 是一样的\n   * @returns {GLTFAccessor | undefined}\n   */\n  getAccessor(attrName: string) {\n    switch (attrName.toLowerCase()) {\n      case \"uv0\":\n      case \"uv\":\n        if (this.attributes.uv0 !== undefined) {\n          return this.doc?.accessors[this.attributes.uv0];\n        }\n        return undefined;\n      case \"uv1\":\n        if (this.attributes.uv1 !== undefined) {\n          return this.doc?.accessors[this.attributes.uv1];\n        }\n        return undefined;\n      case \"color0\":\n      case \"color\":\n        if (this.attributes.color0 !== undefined) {\n          return this.doc?.accessors[this.attributes.color0];\n        }\n        return undefined;\n      case \"normal\":\n        if (this.attributes.normal !== undefined) {\n          return this.doc?.accessors[this.attributes.normal];\n        }\n        return undefined;\n      case \"tangent\":\n        if (this.attributes.tangent !== undefined) {\n          return this.doc?.accessors[this.attributes.tangent];\n        }\n        return undefined;\n      case \"joints0\":\n      case \"joints\":\n        if (this.attributes.joints0 !== undefined) {\n          return this.doc?.accessors[this.attributes.joints0];\n        }\n        return undefined;\n      case \"weights0\":\n      case \"weights\":\n        if (this.attributes.weights0 !== undefined) {\n          return this.doc?.accessors[this.attributes.weights0];\n        }\n        return undefined;\n      case \"_batchid\":\n      case \"batchid\":\n        if (this.attributes._batchid !== undefined) {\n          return this.doc?.accessors[this.attributes._batchid];\n        }\n        return undefined;\n      default:\n        return this.doc?.accessors[this.attributes.position];\n    }\n  }\n\n  validate() {\n    if (this.attributes.validate() === false) {\n      return false;\n    }\n    if (this.indices! < 0) {\n      return false;\n    }\n    if (this.material! < 0) {\n      return false;\n    }\n    return true;\n  }\n\n  json() {\n    const prmt = {\n      attributes: this.attributes.json(),\n    };\n    if (this.mode !== GLTFPrimitiveMode.TRIANGLES && this.mode !== undefined) {\n      writeDefinedProperty(prmt, \"mode\", this.mode);\n    }\n    writeDefinedProperty(prmt, \"indices\", this.indices);\n    writeDefinedProperty(prmt, \"material\", this.material);\n    writeExtensionsProperty(prmt, this.extensions);\n    writeDefinedProperty(prmt, \"extras\", this.extras);\n\n    return prmt;\n  }\n\n  static fromJson(json: IGLTFPrimitive) {\n    const prmt = new GLTFPrimitive();\n    prmt.indices = json.indices;\n    prmt.material = json.material;\n    if (json.mode !== undefined && json.mode !== 4) {\n      if (GLTFPrimitiveModeValues.includes(json.mode)) {\n        prmt.mode = json.mode as GLTFPrimitiveMode;\n      } else {\n        throw new Error(\n          `[GLTFPrimitive.readFromJson()] mode：${json.mode} 不合法，请检查`\n        );\n      }\n    }\n    prmt.attributes = GLTFPrimitiveAttribute.fromJson(json.attributes);\n    return prmt;\n  }\n}\n\nexport default GLTFPrimitive;\n","import { IGLTFMesh } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFPrimitive from \"./gltf-primitive\"\r\nimport { GLTFDocument } from \"..\"\r\n\r\nclass GLTFMesh extends GLTFPropertyBase {\r\n  primitives: GLTFPrimitive[] = []\r\n  weights?: number[]\r\n  name?: string\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  set doc(value: GLTFDocument) {\r\n    this._doc = value\r\n    this.primitives.forEach(p => p.doc = value)\r\n  }\r\n\r\n  validate() {\r\n    let flag = false\r\n    if (this.primitives.every(primitive => primitive.validate())) {\r\n      flag = true\r\n    }\r\n    return flag\r\n  }\r\n\r\n  json() {\r\n    const mesh = {\r\n      primitives: this.primitives.map(prmt => prmt.json())\r\n    }\r\n    writeDefinedProperty(mesh, 'weights', this.weights)\r\n    writeDefinedProperty(mesh, 'name', this.name)\r\n    writeExtensionsProperty(mesh, this.extensions)\r\n\r\n    return mesh\r\n  }\r\n\r\n  static fromJson(json: IGLTFMesh) {\r\n    const mesh = new GLTFMesh()\r\n    mesh.name = json.name\r\n    mesh.primitives = json.primitives.map(priJson => GLTFPrimitive.fromJson(priJson))\r\n    mesh.weights = json.weights\r\n    mesh.extras = json.extras\r\n    return mesh\r\n  }\r\n}\r\n\r\nexport default GLTFMesh","import { IGLTFTextureInfo } from \"src/interfaces/IGLTFObj\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nclass GLTFTextureInfo extends GLTFPropertyBase {\r\n  index: number\r\n  texCoord: number\r\n\r\n  constructor(index: number, texCoord: number) {\r\n    super()\r\n    this.index = index\r\n    this.texCoord = texCoord\r\n  }\r\n\r\n  validate() {\r\n    return (this.index < 0 || this.texCoord < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFTextureInfo json()] 当前 textureinfo 对象属性不合法，请检查')\r\n    }\r\n\r\n    const tinfo = {\r\n      index: this.index,\r\n      texCoord: this.texCoord\r\n    }\r\n\r\n    return tinfo\r\n  }\r\n\r\n  static fromJson(json: IGLTFTextureInfo) {\r\n    const textureInfo = new GLTFTextureInfo(json.index, json.texCoord)\r\n    textureInfo.extras = json.extras\r\n\r\n    return textureInfo\r\n  }\r\n}\r\n\r\nexport default GLTFTextureInfo","import { IGLTFNormalTextureInfo } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFNormalTextureInfo \r\nextends GLTFTextureInfo  {\r\n  scale: number\r\n\r\n  constructor(index: number, texCoord: number, scale: number) {\r\n    super(index, texCoord)\r\n    this.scale = scale\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFNormalTextureInfo json()] 当前 normal textureinfo 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n    writeDefinedProperty(st, 'scale', this.scale)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n\r\n  static fromJson(json: IGLTFNormalTextureInfo) {\r\n    const normalTextureInfo = new GLTFNormalTextureInfo(json.index, json.texCoord, json.scale)\r\n    normalTextureInfo.extras = json.extras\r\n    return normalTextureInfo\r\n  }\r\n}\r\n\r\nexport default GLTFNormalTextureInfo","import { IGLTFPbr } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFPbr extends GLTFPropertyBase {\r\n  baseColorFactor?: [number, number, number, number] = [1, 1, 1, 1]\r\n  baseColorTexture?: GLTFTextureInfo\r\n  metallicFactor?: number\r\n  roughnessFactor?: number\r\n  metallicRoughnessTexture?: GLTFTextureInfo\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.baseColorFactor && this.baseColorFactor.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    if (this.roughnessFactor !== undefined) {\r\n      if (this.roughnessFactor > 1 || this.roughnessFactor < 0)\r\n        return false\r\n    }\r\n    if ((this.metallicFactor !== undefined && this.metallicFactor > 1)\r\n      || (this.metallicFactor !== undefined && this.metallicFactor < 0)) {\r\n      return false\r\n    }\r\n    if (this.baseColorTexture?.validate() === false || this.metallicRoughnessTexture?.validate() === false) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (this.validate() === false) {\r\n      throw new Error('[GLTFPbr json()] 此 pbr 对象属性有误，请检查')\r\n    }\r\n\r\n    const pbr = {}\r\n\r\n    if (this.baseColorFactor !== undefined && this.baseColorFactor.every(v => v !== 1.0)) {\r\n      writeDefinedProperty(pbr, 'baseColorFactor', this.baseColorFactor)\r\n    }\r\n    writeDefinedProperty(pbr, 'baseColorTexture', this.baseColorTexture !== undefined ? this.baseColorTexture.json() : undefined)\r\n    writeDefinedProperty(pbr, 'metallicFactor', this.metallicFactor && this.metallicFactor === 1 ? undefined : this.metallicFactor)\r\n    writeDefinedProperty(pbr, 'roughnessFactor', this.roughnessFactor && this.roughnessFactor === 1 ? undefined : this.roughnessFactor)\r\n    writeDefinedProperty(pbr, 'metallicRoughnessTexture', this.metallicRoughnessTexture !== undefined ? this.metallicRoughnessTexture.json() : undefined)\r\n    writeExtensionsProperty(pbr, this.extensions)\r\n    writeDefinedProperty(pbr, 'extras', this.extras)\r\n\r\n    return pbr\r\n  }\r\n\r\n  static fromJson(json: IGLTFPbr) {\r\n    const pbr = new GLTFPbr()\r\n\r\n    pbr.extras = json.extras\r\n    pbr.metallicFactor = json.metallicFactor\r\n    pbr.roughnessFactor = json.roughnessFactor\r\n    pbr.baseColorFactor = json.baseColorFactor\r\n    if (json.baseColorTexture !== undefined) {\r\n      pbr.baseColorTexture = GLTFTextureInfo.fromJson(json.baseColorTexture)\r\n    }\r\n    if (json.metallicRoughnessTexture !== undefined) {\r\n      pbr.metallicRoughnessTexture = GLTFTextureInfo.fromJson(json.metallicRoughnessTexture)\r\n    }\r\n\r\n    return pbr\r\n  }\r\n}\r\n\r\nexport default GLTFPbr","import { IGLTFMaterial } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport { GLTFAlphaMode } from \"./enum\"\r\nimport { GLTFAlphaModeValues } from \"./enum/gltf-alphamode\"\r\nimport GLTFNormalTextureInfo from \"./gltf-normal-texture-info\"\r\nimport GLTFOcclusionTextureInfo from \"./gltf-occlusion-texture-info\"\r\nimport GLTFPbr from \"./gltf-pbr\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\nimport { GLTFDocument } from \"..\"\r\n\r\nclass GLTFMaterial extends GLTFPropertyBase {\r\n  name?: string\r\n  pbrMetallicRoughness?: GLTFPbr\r\n  normalTexture?: GLTFNormalTextureInfo\r\n  occlusionTexture?: GLTFOcclusionTextureInfo\r\n  emissiveTexture?: GLTFTextureInfo\r\n  emissiveFactor?: [number, number, number] = [0, 0, 0]\r\n  alphaMode?: GLTFAlphaMode = GLTFAlphaMode.OPAQUE\r\n  alphaCutoff?: number = 0.5\r\n  doubleSided?: boolean = false\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  set doc(value: GLTFDocument) {\r\n    this._doc = value\r\n    if (this.pbrMetallicRoughness !== undefined) {\r\n      this.pbrMetallicRoughness.doc = value\r\n    }\r\n    if (this.normalTexture !== undefined) {\r\n      this.normalTexture.doc = value\r\n    }\r\n    if (this.emissiveTexture !== undefined) {\r\n      this.emissiveTexture.doc = value\r\n    }\r\n    if (this.occlusionTexture !== undefined) {\r\n      this.occlusionTexture.doc = value\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.pbrMetallicRoughness?.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.normalTexture?.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.occlusionTexture?.validate() === false) {\r\n      return false\r\n    }\r\n    if (this.alphaMode === GLTFAlphaMode.MASK && this.alphaCutoff === undefined) {\r\n      return false\r\n    }\r\n    if (this.emissiveFactor?.every(v => v < 0 || v > 1)) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFMaterial json()] 此 material 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const m = {}\r\n\r\n    writeDefinedProperty(m, 'name', this.name)\r\n    writeDefinedProperty(m, 'pbrMetallicRoughness', this.pbrMetallicRoughness !== undefined ? this.pbrMetallicRoughness.json() : undefined)\r\n    writeDefinedProperty(m, 'normalTexture', this.normalTexture !== undefined ? this.normalTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveTexture', this.emissiveTexture !== undefined ? this.emissiveTexture.json() : undefined)\r\n    writeDefinedProperty(m, 'emissiveFactor', this.emissiveFactor)\r\n    writeDefinedProperty(m, 'alphaMode', this.alphaMode !== undefined && this.alphaMode !== GLTFAlphaMode.OPAQUE ? this.alphaMode : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.alphaCutoff !== 0.5 && this.alphaCutoff !== undefined ? this.alphaCutoff : undefined)\r\n    writeDefinedProperty(m, 'alphaCutoff', this.doubleSided !== false && this.doubleSided !== undefined ? this.doubleSided : undefined)\r\n    writeExtensionsProperty(m, this.extensions)\r\n    writeDefinedProperty(m, 'extras', this.extras)\r\n    \r\n    return m\r\n  }\r\n\r\n  static fromJson(json: IGLTFMaterial) {\r\n    const mtl = new GLTFMaterial()\r\n    mtl.name = json.name\r\n    if (json.pbrMetallicRoughness !== undefined) {\r\n      mtl.pbrMetallicRoughness = GLTFPbr.fromJson(json.pbrMetallicRoughness)\r\n    }\r\n    if (json.normalTexture !== undefined) {\r\n      mtl.normalTexture = GLTFNormalTextureInfo.fromJson(json.normalTexture)\r\n    }\r\n    if (json.emissiveTexture !== undefined) {\r\n      mtl.emissiveTexture = GLTFTextureInfo.fromJson(json.emissiveTexture)\r\n    }\r\n    if (json.alphaMode !== undefined && GLTFAlphaModeValues.includes(json.alphaMode)) {\r\n      mtl.alphaMode = json.alphaMode as GLTFAlphaMode\r\n    }\r\n    mtl.doubleSided = json.doubleSided\r\n    mtl.emissiveFactor = json.emissiveFactor\r\n    mtl.alphaCutoff = json.alphaCutoff\r\n    mtl.extras = json.extras\r\n    return mtl\r\n  }\r\n}\r\n\r\nexport default GLTFMaterial","import { IGLTFTexture } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nclass GLTFTexture extends GLTFPropertyBase {\r\n  sampler?: number\r\n  source?: number\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    if (this.sampler === undefined && this.source === undefined && this.name === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const tx = {}\r\n    writeDefinedProperty(tx, 'name', this.name)\r\n    writeDefinedProperty(tx, 'source', this.source)\r\n    writeDefinedProperty(tx, 'sampler', this.sampler)\r\n    writeExtensionsProperty(tx, this.extensions)\r\n    writeDefinedProperty(tx, 'extras', this.extras)\r\n\r\n    return tx\r\n  }\r\n\r\n  static fromJson(json: IGLTFTexture) {\r\n    const tx = new GLTFTexture()\r\n    tx.name = json.name\r\n    tx.source = json.source\r\n    tx.sampler = json.sampler\r\n    tx.extras = json.extras\r\n    return tx\r\n  }\r\n}\r\n\r\nexport default GLTFTexture","/*\n * Copyright 2017 Sam Thorogood. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */\n\n(function(scope) {\n  'use strict';\n\n  // fail early\n  if (scope['TextEncoder'] && scope['TextDecoder']) {\n    return false;\n  }\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   */\n  function FastTextEncoder(utfLabel = 'utf-8') {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextEncoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextEncoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  /**\n   * @param {string} string\n   * @param {{stream: boolean}=} options\n   * @return {!Uint8Array}\n   */\n  FastTextEncoder.prototype.encode = function(\n    string,\n    options = { stream: false },\n  ) {\n    if (options.stream) {\n      throw new Error(`Failed to encode: the 'stream' option is unsupported.`);\n    }\n\n    let pos = 0;\n    const len = string.length;\n    const out = [];\n\n    let at = 0; // output position\n    let tlen = Math.max(32, len + (len >> 1) + 7); // 1.5x size\n    let target = new Uint8Array((tlen >> 3) << 3); // ... but at 8 byte offset\n\n    while (pos < len) {\n      let value = string.charCodeAt(pos++);\n      if (value >= 0xd800 && value <= 0xdbff) {\n        // high surrogate\n        if (pos < len) {\n          const extra = string.charCodeAt(pos);\n          if ((extra & 0xfc00) === 0xdc00) {\n            ++pos;\n            value = ((value & 0x3ff) << 10) + (extra & 0x3ff) + 0x10000;\n          }\n        }\n        if (value >= 0xd800 && value <= 0xdbff) {\n          continue; // drop lone surrogate\n        }\n      }\n\n      // expand the buffer if we couldn't write 4 bytes\n      if (at + 4 > target.length) {\n        tlen += 8; // minimum extra\n        tlen *= 1.0 + (pos / string.length) * 2; // take 2x the remaining\n        tlen = (tlen >> 3) << 3; // 8 byte offset\n\n        const update = new Uint8Array(tlen);\n        update.set(target);\n        target = update;\n      }\n\n      if ((value & 0xffffff80) === 0) {\n        // 1-byte\n        target[at++] = value; // ASCII\n        continue;\n      } else if ((value & 0xfffff800) === 0) {\n        // 2-byte\n        target[at++] = ((value >> 6) & 0x1f) | 0xc0;\n      } else if ((value & 0xffff0000) === 0) {\n        // 3-byte\n        target[at++] = ((value >> 12) & 0x0f) | 0xe0;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else if ((value & 0xffe00000) === 0) {\n        // 4-byte\n        target[at++] = ((value >> 18) & 0x07) | 0xf0;\n        target[at++] = ((value >> 12) & 0x3f) | 0x80;\n        target[at++] = ((value >> 6) & 0x3f) | 0x80;\n      } else {\n        // FIXME: do we care\n        continue;\n      }\n\n      target[at++] = (value & 0x3f) | 0x80;\n    }\n\n    return target.slice(0, at);\n  };\n\n  /**\n   * @constructor\n   * @param {string=} utfLabel\n   * @param {{fatal: boolean}=} options\n   */\n  function FastTextDecoder(utfLabel = 'utf-8', options = { fatal: false }) {\n    if (utfLabel !== 'utf-8') {\n      throw new RangeError(\n        `Failed to construct 'TextDecoder': The encoding label provided ('${utfLabel}') is invalid.`,\n      );\n    }\n    if (options.fatal) {\n      throw new Error(\n        `Failed to construct 'TextDecoder': the 'fatal' option is unsupported.`,\n      );\n    }\n  }\n\n  Object.defineProperty(FastTextDecoder.prototype, 'encoding', {\n    value: 'utf-8',\n  });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'fatal', { value: false });\n\n  Object.defineProperty(FastTextDecoder.prototype, 'ignoreBOM', {\n    value: false,\n  });\n\n  /**\n   * @param {(!ArrayBuffer|!ArrayBufferView)} buffer\n   * @param {{stream: boolean}=} options\n   */\n  FastTextDecoder.prototype.decode = function(\n    buffer,\n    options = { stream: false },\n  ) {\n    if (options['stream']) {\n      throw new Error(`Failed to decode: the 'stream' option is unsupported.`);\n    }\n\n    const bytes = new Uint8Array(buffer);\n    let pos = 0;\n    const len = bytes.length;\n    const out = [];\n\n    while (pos < len) {\n      const byte1 = bytes[pos++];\n      if (byte1 === 0) {\n        break; // NULL\n      }\n\n      if ((byte1 & 0x80) === 0) {\n        // 1-byte\n        out.push(byte1);\n      } else if ((byte1 & 0xe0) === 0xc0) {\n        // 2-byte\n        const byte2 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 6) | byte2);\n      } else if ((byte1 & 0xf0) === 0xe0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        out.push(((byte1 & 0x1f) << 12) | (byte2 << 6) | byte3);\n      } else if ((byte1 & 0xf8) === 0xf0) {\n        const byte2 = bytes[pos++] & 0x3f;\n        const byte3 = bytes[pos++] & 0x3f;\n        const byte4 = bytes[pos++] & 0x3f;\n\n        // this can be > 0xffff, so possibly generate surrogates\n        let codepoint =\n          ((byte1 & 0x07) << 0x12) | (byte2 << 0x0c) | (byte3 << 0x06) | byte4;\n        if (codepoint > 0xffff) {\n          // codepoint &= ~0x10000;\n          codepoint -= 0x10000;\n          out.push(((codepoint >>> 10) & 0x3ff) | 0xd800);\n          codepoint = 0xdc00 | (codepoint & 0x3ff);\n        }\n        out.push(codepoint);\n      } else {\n        // FIXME: we're ignoring this\n      }\n    }\n\n    return String.fromCharCode.apply(null, out);\n  };\n\n  scope['TextEncoder'] = FastTextEncoder;\n  scope['TextDecoder'] = FastTextDecoder;\n})(\n  typeof window !== 'undefined'\n    ? window\n    : typeof self !== 'undefined'\n    ? self\n    : this,\n);\n","// eslint-disable-next-line import/no-unassigned-import\nimport './text-encoding-polyfill';\n\nconst decoder = new TextDecoder('utf-8');\n\nexport function decode(bytes: Uint8Array): string {\n  return decoder.decode(bytes);\n}\n\nconst encoder = new TextEncoder();\n\nexport function encode(str: string): Uint8Array {\n  return encoder.encode(str);\n}\n","import { decode, encode } from './utf8';\n\nconst defaultByteLength = 1024 * 8;\n\ntype InputData = number | ArrayBufferLike | ArrayBufferView | IOBuffer | Buffer;\n\ninterface IOBufferOptions {\n  /**\n   * Ignore the first n bytes of the ArrayBuffer.\n   */\n  offset?: number;\n}\n\nexport class IOBuffer {\n  /**\n   * Reference to the internal ArrayBuffer object.\n   */\n  public buffer: ArrayBufferLike;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public byteLength: number;\n\n  /**\n   * Byte offset of the internal ArrayBuffer.\n   */\n  public byteOffset: number;\n\n  /**\n   * Byte length of the internal ArrayBuffer.\n   */\n  public length: number;\n\n  /**\n   * The current offset of the buffer's pointer.\n   */\n  public offset: number;\n\n  private lastWrittenByte: number;\n  private littleEndian: boolean;\n\n  private _data: DataView;\n  private _mark: number;\n  private _marks: number[];\n\n  /**\n   * @param data - The data to construct the IOBuffer with.\n   * If data is a number, it will be the new buffer's length<br>\n   * If data is `undefined`, the buffer will be initialized with a default length of 8Kb<br>\n   * If data is an ArrayBuffer, SharedArrayBuffer, an ArrayBufferView (Typed Array), an IOBuffer instance,\n   * or a Node.js Buffer, a view will be created over the underlying ArrayBuffer.\n   * @param options\n   */\n  public constructor(\n    data: InputData = defaultByteLength,\n    options: IOBufferOptions = {},\n  ) {\n    let dataIsGiven = false;\n    if (typeof data === 'number') {\n      data = new ArrayBuffer(data);\n    } else {\n      dataIsGiven = true;\n      this.lastWrittenByte = data.byteLength;\n    }\n\n    const offset = options.offset ? options.offset >>> 0 : 0;\n    const byteLength = data.byteLength - offset;\n    let dvOffset = offset;\n    if (ArrayBuffer.isView(data) || data instanceof IOBuffer) {\n      if (data.byteLength !== data.buffer.byteLength) {\n        dvOffset = data.byteOffset + offset;\n      }\n      data = data.buffer;\n    }\n    if (dataIsGiven) {\n      this.lastWrittenByte = byteLength;\n    } else {\n      this.lastWrittenByte = 0;\n    }\n    this.buffer = data;\n    this.length = byteLength;\n    this.byteLength = byteLength;\n    this.byteOffset = dvOffset;\n    this.offset = 0;\n    this.littleEndian = true;\n    this._data = new DataView(this.buffer, dvOffset, byteLength);\n    this._mark = 0;\n    this._marks = [];\n  }\n\n  /**\n   * Checks if the memory allocated to the buffer is sufficient to store more\n   * bytes after the offset.\n   * @param byteLength - The needed memory in bytes.\n   * @returns `true` if there is sufficient space and `false` otherwise.\n   */\n  public available(byteLength = 1): boolean {\n    return this.offset + byteLength <= this.length;\n  }\n\n  /**\n   * Check if little-endian mode is used for reading and writing multi-byte\n   * values.\n   * @returns `true` if little-endian mode is used, `false` otherwise.\n   */\n  public isLittleEndian(): boolean {\n    return this.littleEndian;\n  }\n\n  /**\n   * Set little-endian mode for reading and writing multi-byte values.\n   */\n  public setLittleEndian(): this {\n    this.littleEndian = true;\n    return this;\n  }\n\n  /**\n   * Check if big-endian mode is used for reading and writing multi-byte values.\n   * @returns `true` if big-endian mode is used, `false` otherwise.\n   */\n  public isBigEndian(): boolean {\n    return !this.littleEndian;\n  }\n\n  /**\n   * Switches to big-endian mode for reading and writing multi-byte values.\n   */\n  public setBigEndian(): this {\n    this.littleEndian = false;\n    return this;\n  }\n\n  /**\n   * Move the pointer n bytes forward.\n   * @param n - Number of bytes to skip.\n   */\n  public skip(n = 1): this {\n    this.offset += n;\n    return this;\n  }\n\n  /**\n   * Move the pointer to the given offset.\n   * @param offset\n   */\n  public seek(offset: number): this {\n    this.offset = offset;\n    return this;\n  }\n\n  /**\n   * Store the current pointer offset.\n   * @see {@link IOBuffer#reset}\n   */\n  public mark(): this {\n    this._mark = this.offset;\n    return this;\n  }\n\n  /**\n   * Move the pointer back to the last pointer offset set by mark.\n   * @see {@link IOBuffer#mark}\n   */\n  public reset(): this {\n    this.offset = this._mark;\n    return this;\n  }\n\n  /**\n   * Push the current pointer offset to the mark stack.\n   * @see {@link IOBuffer#popMark}\n   */\n  public pushMark(): this {\n    this._marks.push(this.offset);\n    return this;\n  }\n\n  /**\n   * Pop the last pointer offset from the mark stack, and set the current\n   * pointer offset to the popped value.\n   * @see {@link IOBuffer#pushMark}\n   */\n  public popMark(): this {\n    const offset = this._marks.pop();\n    if (offset === undefined) {\n      throw new Error('Mark stack empty');\n    }\n    this.seek(offset);\n    return this;\n  }\n\n  /**\n   * Move the pointer offset back to 0.\n   */\n  public rewind(): this {\n    this.offset = 0;\n    return this;\n  }\n\n  /**\n   * Make sure the buffer has sufficient memory to write a given byteLength at\n   * the current pointer offset.\n   * If the buffer's memory is insufficient, this method will create a new\n   * buffer (a copy) with a length that is twice (byteLength + current offset).\n   * @param byteLength\n   */\n  public ensureAvailable(byteLength = 1): this {\n    if (!this.available(byteLength)) {\n      const lengthNeeded = this.offset + byteLength;\n      const newLength = lengthNeeded * 2;\n      const newArray = new Uint8Array(newLength);\n      newArray.set(new Uint8Array(this.buffer));\n      this.buffer = newArray.buffer;\n      this.length = this.byteLength = newLength;\n      this._data = new DataView(this.buffer);\n    }\n    return this;\n  }\n\n  /**\n   * Read a byte and return false if the byte's value is 0, or true otherwise.\n   * Moves pointer forward by one byte.\n   */\n  public readBoolean(): boolean {\n    return this.readUint8() !== 0;\n  }\n\n  /**\n   * Read a signed 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readInt8(): number {\n    return this._data.getInt8(this.offset++);\n  }\n\n  /**\n   * Read an unsigned 8-bit integer and move pointer forward by 1 byte.\n   */\n  public readUint8(): number {\n    return this._data.getUint8(this.offset++);\n  }\n\n  /**\n   * Alias for {@link IOBuffer#readUint8}.\n   */\n  public readByte(): number {\n    return this.readUint8();\n  }\n\n  /**\n   * Read `n` bytes and move pointer forward by `n` bytes.\n   */\n  public readBytes(n = 1): Uint8Array {\n    const bytes = new Uint8Array(n);\n    for (let i = 0; i < n; i++) {\n      bytes[i] = this.readByte();\n    }\n    return bytes;\n  }\n\n  /**\n   * Read a 16-bit signed integer and move pointer forward by 2 bytes.\n   */\n  public readInt16(): number {\n    const value = this._data.getInt16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 16-bit unsigned integer and move pointer forward by 2 bytes.\n   */\n  public readUint16(): number {\n    const value = this._data.getUint16(this.offset, this.littleEndian);\n    this.offset += 2;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit signed integer and move pointer forward by 4 bytes.\n   */\n  public readInt32(): number {\n    const value = this._data.getInt32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit unsigned integer and move pointer forward by 4 bytes.\n   */\n  public readUint32(): number {\n    const value = this._data.getUint32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 32-bit floating number and move pointer forward by 4 bytes.\n   */\n  public readFloat32(): number {\n    const value = this._data.getFloat32(this.offset, this.littleEndian);\n    this.offset += 4;\n    return value;\n  }\n\n  /**\n   * Read a 64-bit floating number and move pointer forward by 8 bytes.\n   */\n  public readFloat64(): number {\n    const value = this._data.getFloat64(this.offset, this.littleEndian);\n    this.offset += 8;\n    return value;\n  }\n\n  /**\n   * Read a 1-byte ASCII character and move pointer forward by 1 byte.\n   */\n  public readChar(): string {\n    return String.fromCharCode(this.readInt8());\n  }\n\n  /**\n   * Read `n` 1-byte ASCII characters and move pointer forward by `n` bytes.\n   */\n  public readChars(n = 1): string {\n    let result = '';\n    for (let i = 0; i < n; i++) {\n      result += this.readChar();\n    }\n    return result;\n  }\n\n  /**\n   * Read the next `n` bytes, return a UTF-8 decoded string and move pointer\n   * forward by `n` bytes.\n   */\n  public readUtf8(n = 1): string {\n    return decode(this.readBytes(n));\n  }\n\n  /**\n   * Write 0xff if the passed value is truthy, 0x00 otherwise and move pointer\n   * forward by 1 byte.\n   */\n  public writeBoolean(value: unknown): this {\n    this.writeUint8(value ? 0xff : 0x00);\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit signed integer and move pointer forward by 1 byte.\n   */\n  public writeInt8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setInt8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as an 8-bit unsigned integer and move pointer forward by 1\n   * byte.\n   */\n  public writeUint8(value: number): this {\n    this.ensureAvailable(1);\n    this._data.setUint8(this.offset++, value);\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * An alias for {@link IOBuffer#writeUint8}.\n   */\n  public writeByte(value: number): this {\n    return this.writeUint8(value);\n  }\n\n  /**\n   * Write all elements of `bytes` as uint8 values and move pointer forward by\n   * `bytes.length` bytes.\n   */\n  public writeBytes(bytes: ArrayLike<number>): this {\n    this.ensureAvailable(bytes.length);\n    for (let i = 0; i < bytes.length; i++) {\n      this._data.setUint8(this.offset++, bytes[i]);\n    }\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit signed integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeInt16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setInt16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 16-bit unsigned integer and move pointer forward by 2\n   * bytes.\n   */\n  public writeUint16(value: number): this {\n    this.ensureAvailable(2);\n    this._data.setUint16(this.offset, value, this.littleEndian);\n    this.offset += 2;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit signed integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeInt32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setInt32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit unsigned integer and move pointer forward by 4\n   * bytes.\n   */\n  public writeUint32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setUint32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 32-bit floating number and move pointer forward by 4\n   * bytes.\n   */\n  public writeFloat32(value: number): this {\n    this.ensureAvailable(4);\n    this._data.setFloat32(this.offset, value, this.littleEndian);\n    this.offset += 4;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write `value` as a 64-bit floating number and move pointer forward by 8\n   * bytes.\n   */\n  public writeFloat64(value: number): this {\n    this.ensureAvailable(8);\n    this._data.setFloat64(this.offset, value, this.littleEndian);\n    this.offset += 8;\n    this._updateLastWrittenByte();\n    return this;\n  }\n\n  /**\n   * Write the charCode of `str`'s first character as an 8-bit unsigned integer\n   * and move pointer forward by 1 byte.\n   */\n  public writeChar(str: string): this {\n    return this.writeUint8(str.charCodeAt(0));\n  }\n\n  /**\n   * Write the charCodes of all `str`'s characters as 8-bit unsigned integers\n   * and move pointer forward by `str.length` bytes.\n   */\n  public writeChars(str: string): this {\n    for (let i = 0; i < str.length; i++) {\n      this.writeUint8(str.charCodeAt(i));\n    }\n    return this;\n  }\n\n  /**\n   * UTF-8 encode and write `str` to the current pointer offset and move pointer\n   * forward according to the encoded length.\n   */\n  public writeUtf8(str: string): this {\n    return this.writeBytes(encode(str));\n  }\n\n  /**\n   * Export a Uint8Array view of the internal buffer.\n   * The view starts at the byte offset and its length\n   * is calculated to stop at the last written byte or the original length.\n   */\n  public toArray(): Uint8Array {\n    return new Uint8Array(this.buffer, this.byteOffset, this.lastWrittenByte);\n  }\n\n  /**\n   * Update the last written byte offset\n   * @private\n   */\n  private _updateLastWrittenByte(): void {\n    if (this.offset > this.lastWrittenByte) {\n      this.lastWrittenByte = this.offset;\n    }\n  }\n}\n","enum GLTFAnimationChannelTargetPath {\r\n  TRANSLATION = \"translation\",\r\n  ROTATION = \"rotation\",\r\n  SCALE = \"scale\",\r\n  WEIGHTS = \"weights\"\r\n}\r\n\r\nexport const GLTFAnimationChannelTargetPathValues = Object.freeze(Object.values(GLTFAnimationChannelTargetPath) as Array<string>)\r\n\r\nexport default GLTFAnimationChannelTargetPath","import { decode } from 'base64-arraybuffer'\r\nimport { IGLTFImage } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport MIME from \"./enum/mime\"\r\nimport { IOBuffer } from 'iobuffer'\r\n\r\nclass GLTFImage extends GLTFPropertyBase {\r\n  uri?: string\r\n  bufferView?: number\r\n  mimeType?: MIME\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  get isEncodeWithUri() {\r\n    return this.uri === undefined && this.bufferView !== undefined\r\n  }\r\n  \r\n  get getImageData() {\r\n    if (this.validate() === false) {\r\n      throw new Error('[GLTFImage getImageData()] 当前 image 对象属性有问题，请检查')\r\n    }\r\n    if (this.uri && this.isEncodeWithUri) {\r\n      return decode(this.uri)\r\n    }\r\n\r\n    if (this.doc === undefined) {\r\n      throw new Error('')\r\n    } else {\r\n      if (this.doc.buffers.length === 0 || this.doc.bufferViews.length === 0) {\r\n        throw new Error('')\r\n      } else {        \r\n        const bv = this.doc.bufferViews[this.bufferView!]\r\n        const bf = this.doc.buffers[bv.buffer]\r\n        // 有的时候 byteOffset 并不会指明，那么 bufferView 的 buffer 索引即它自己的索引\r\n        const begin = bv.byteOffset === undefined ? this.doc.bufferViews.indexOf(bv) : bv.byteOffset\r\n        const length = bv.byteLength\r\n        const bufferdata = bf.bufferData\r\n        if (bufferdata !== undefined) {\r\n          return new IOBuffer(bufferdata)\r\n          .skip(begin)\r\n          .readBytes(length)\r\n          .buffer\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    if (this.uri !== undefined && this.bufferView !== undefined) {\r\n      return false\r\n    }\r\n    if (this.bufferView !== undefined) {\r\n      if (this.mimeType === undefined) {\r\n        return false\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const img = {}\r\n    writeDefinedProperty(img, 'name', this.name)\r\n    writeDefinedProperty(img, 'bufferView', this.bufferView)\r\n    writeDefinedProperty(img, 'uri', this.uri)\r\n    writeDefinedProperty(img, 'mimeType', this.mimeType)\r\n    writeExtensionsProperty(img, this.extensions)\r\n    writeDefinedProperty(img, 'extras', this.extras)\r\n\r\n    return img\r\n  }\r\n\r\n  static fromJson(json: IGLTFImage) {\r\n    const img = new GLTFImage()\r\n    img.name = json.name\r\n    img.bufferView = json.bufferView\r\n    if (json.mimeType !== undefined) {\r\n      if (json.mimeType in MIME) {\r\n        img.mimeType = json.mimeType as MIME\r\n      } else {\r\n        throw new Error('[GLTFImage.readFromJson()] 不支持的 mime 类型')\r\n      }\r\n    }\r\n    img.extras = json.extras\r\n    return img\r\n  }\r\n}\r\n\r\nexport default GLTFImage","import { IGLTFSampler } from 'src/interfaces/IGLTFObj'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFFilter, { GLTFFilterValues } from './enum/gltf-filter'\r\nimport GLTFWrapMode, { GLTFWrapModeValues } from './enum/gltf-wrapmode'\r\n\r\nclass GLTFSampler extends GLTFPropertyBase {\r\n  magFilter?: GLTFFilter\r\n  minFilter?: GLTFFilter\r\n  wrapS?: GLTFWrapMode\r\n  wrapT?: GLTFWrapMode\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    // 注意默认值检查\r\n    if (this.magFilter === undefined && this.minFilter === undefined && this.wrapS === undefined && this.wrapT === undefined)\r\n      return false\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFSampler json()] 当前 sampler 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const spl = {}\r\n    writeDefinedProperty(spl, 'magFilter', this.magFilter)\r\n    writeDefinedProperty(spl, 'minFilter', this.minFilter)\r\n    writeDefinedProperty(spl, 'wrapS', this.wrapS)\r\n    writeDefinedProperty(spl, 'wrapT', this.wrapT)\r\n    writeDefinedProperty(spl, 'name', this.name)\r\n    writeExtensionsProperty(spl, this.extensions)\r\n    writeDefinedProperty(spl, 'extras', this.extras)\r\n\r\n    return spl\r\n  }\r\n\r\n  static fromJson(json: IGLTFSampler) {\r\n    const spl = new GLTFSampler()\r\n    spl.name = json.name\r\n    if (json.magFilter !== undefined && GLTFFilterValues.includes(json.magFilter)) {\r\n      spl.magFilter = json.magFilter as GLTFFilter\r\n    }\r\n    if (json.minFilter !== undefined && GLTFFilterValues.includes(json.minFilter)) {\r\n      spl.minFilter = json.minFilter as GLTFFilter\r\n    }\r\n    if (json.wrapS !== undefined && GLTFWrapModeValues.includes(json.wrapS)) {\r\n      spl.wrapS = json.wrapS as GLTFWrapMode\r\n    }\r\n    if (json.wrapT !== undefined && GLTFWrapModeValues.includes(json.wrapT)) {\r\n      spl.wrapT = json.wrapT as GLTFWrapMode\r\n    }\r\n    spl.extras = json.extras\r\n\r\n    return spl\r\n  }\r\n}\r\n\r\nexport default GLTFSampler","import { IGLTFAnimationChannelTarget } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFAnimationChannelTargetPath, { GLTFAnimationChannelTargetPathValues } from \"./enum/gltf-animation-channel-target-path\"\r\n\r\nclass GLTFAnimationChannelTarget extends GLTFPropertyBase {\r\n  path: GLTFAnimationChannelTargetPath\r\n  node?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const act = {\r\n      path: this.path,\r\n    }\r\n\r\n    writeDefinedProperty(act, 'node', this.node)\r\n    writeExtensionsProperty(act, this.extensions)\r\n    writeDefinedProperty(act, 'extras', this.extras)\r\n\r\n    return act\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAnimationChannelTarget) {\r\n    const channelTarget = new GLTFAnimationChannelTarget()\r\n    channelTarget.extras = json.extras\r\n    channelTarget.node = json.node\r\n    if (json.path !== undefined && GLTFAnimationChannelTargetPathValues.includes(json.path)) {\r\n      channelTarget.path = json.path as GLTFAnimationChannelTargetPath\r\n    }\r\n\r\n    return channelTarget\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannelTarget","import { IGLTFAnimationChannel } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFAnimationChannelTarget from \"./gltf-animation-channel-target\"\r\n\r\nclass GLTFAnimationChannel extends GLTFPropertyBase {\r\n  sampler: number\r\n  target: GLTFAnimationChannelTarget\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return this.target.validate()\r\n  } \r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimationChannel json()] 当前 animation channel 对象的属性不合法，请检查')\r\n    }\r\n\r\n    const ac = {\r\n      sampler: this.sampler,\r\n      target: this.target.json(),\r\n    }\r\n\r\n    writeExtensionsProperty(ac, this.extensions)\r\n    writeDefinedProperty(ac, 'extras', this.extras)\r\n\r\n    return ac\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAnimationChannel) {\r\n    const channel = new GLTFAnimationChannel()\r\n    channel.sampler = json.sampler\r\n    channel.target = GLTFAnimationChannelTarget.readFromJson(json.target)\r\n    channel.extras = json.extras\r\n    \r\n    return channel\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationChannel","enum GLTFAnimationInterpolation {\r\n  LINEAR = \"LINEAR\",\r\n  STEP = \"STEP\",\r\n  CUBICSPLINE = \"CUBICSPLINE\",\r\n}\r\n\r\nexport const GLTFAnimationInterpolationValues = Object.freeze(Object.values(GLTFAnimationInterpolation) as Array<string>)\r\n\r\nexport default GLTFAnimationInterpolation","import { IGLTFAnimationSampler } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFAnimationInterpolation, { GLTFAnimationInterpolationValues } from \"./enum/gltf-animation-interpolation\"\r\n\r\n\r\nclass GLTFAnimationSampler extends GLTFPropertyBase {\r\n  input: number\r\n  interpolation?: GLTFAnimationInterpolation\r\n  output: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    const as = {\r\n      input: this.input,\r\n      output: this.output\r\n    }\r\n\r\n    writeDefinedProperty(as, 'interpolation', this.interpolation)\r\n\r\n    return as\r\n  }\r\n\r\n  static readFromJson(json: IGLTFAnimationSampler) {\r\n    const as = new GLTFAnimationSampler()\r\n    as.input = json.input\r\n    as.output = json.output\r\n    if (json.interpolation !== undefined && GLTFAnimationInterpolationValues.includes(json.interpolation)) {\r\n      as.interpolation = json.interpolation as GLTFAnimationInterpolation\r\n    }\r\n    return as\r\n  }\r\n}\r\n\r\nexport default GLTFAnimationSampler","import { IGLTFAnimation } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFAnimationChannel from \"./gltf-animation-channel\"\r\nimport GLTFAnimationSampler from \"./gltf-animation-sampler\"\r\n\r\nclass GLTFAnimation extends GLTFPropertyBase {\r\n  channels: GLTFAnimationChannel[] = []\r\n  samplers: GLTFAnimationSampler[] = []\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    if (this.channels!.length < 1 || this.samplers!.length < 1) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFAnimation json()] 当前 animation 对象属性不合法，请检查')\r\n    }\r\n\r\n    const ani = {}\r\n\r\n    writeDefinedProperty(ani, 'name', this.name)\r\n    writeDefinedProperty(ani, 'channels', this.channels.length !== 0 ? this.channels.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(ani, 'samplers', this.samplers.length !== 0 ? this.samplers.map(s => s.json()) : undefined)\r\n    writeExtensionsProperty(ani, this.extensions)\r\n    writeDefinedProperty(ani, 'extras', this.extras)\r\n\r\n    return ani\r\n  }\r\n\r\n  static fromJson(json: IGLTFAnimation) {\r\n    const ani = new GLTFAnimation()\r\n    ani.name = json.name\r\n    ani.channels = json.channels.map(channel => GLTFAnimationChannel.readFromJson(channel))\r\n    ani.samplers = json.samplers.map(spl => GLTFAnimationSampler.readFromJson(spl))\r\n    ani.extras = json.extras\r\n\r\n    return ani\r\n  }\r\n}\r\n\r\nexport default GLTFAnimation","enum GLTFCameraType {\r\n  PERSPECTIVE = \"perspective\",\r\n  ORTHOGRAPHIC = \"orthographic\"\r\n}\r\n\r\nexport const GLTFCameraTypeValues = Object.freeze(Object.values(GLTFCameraType) as Array<string>)\r\n\r\nexport default GLTFCameraType","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFOrthographicCamera implements IValidate, ISerializable {\r\n  xmag: number\r\n  ymag: number\r\n  zfar: number\r\n  znear: number\r\n\r\n  validate() {\r\n    return this.znear >= 0 && this.zfar >= 0 && this.xmag !== 0 && this.ymag !== 0 && this.zfar > this.znear\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOrthographicCamera json()] 当前 orthographic camera 对象属性不合法，请检查')\r\n    }\r\n\r\n    const c = {\r\n      xmag: this.xmag,\r\n      ymag: this.ymag,\r\n      zfar: this.zfar,\r\n      znear: this.znear,\r\n    }\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFOrthographicCamera","import { ISerializable, IValidate } from \"src/interfaces\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\n\r\nclass GLTFPerspectiveCamera implements IValidate, ISerializable {\r\n  yfov: number\r\n  znear: number\r\n  zfar?: number\r\n  aspectRatio?: number\r\n\r\n  validate() {\r\n    let flag = this.yfov >= 0 && this.znear >= 0\r\n\r\n    this.aspectRatio !== undefined ? flag = flag && this.aspectRatio >= 0 : flag\r\n    this.zfar !== undefined ? flag = flag && this.zfar >= 0 : flag\r\n    this.zfar !== undefined ? flag = flag && this.zfar > this.znear : flag\r\n\r\n    return flag\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFPerspectiveCamera json()] 当前对象属性有问题，请检查')\r\n    }\r\n\r\n    const c = {\r\n      yfov: this.yfov,\r\n      znear: this.znear\r\n    }\r\n\r\n    writeDefinedProperty(c, 'aspectRatio', this.aspectRatio)\r\n    writeDefinedProperty(c, 'zfar', this.zfar)\r\n\r\n    return c\r\n  }\r\n}\r\n\r\nexport default GLTFPerspectiveCamera","import { IGLTFCamera } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\nimport GLTFCameraType, { GLTFCameraTypeValues } from \"./enum/gltf-cameratype\"\r\nimport GLTFOrthographicCamera from \"./gltf-orthographic-camera\"\r\nimport GLTFPerspectiveCamera from \"./gltf-perspective-camera\"\r\n\r\nclass GLTFCamera extends GLTFPropertyBase {\r\n  orthographic?: GLTFOrthographicCamera\r\n  perspective?: GLTFPerspectiveCamera\r\n  type: GLTFCameraType\r\n  name?: string\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    if (this.orthographic !== undefined && this.perspective !== undefined) {\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFCamera json()] 当前 camera 对象属性不合法，请检查')\r\n    }\r\n\r\n    const camera = {\r\n      type: this.type\r\n    }\r\n\r\n    writeDefinedProperty(camera, 'name', this.name)\r\n    writeDefinedProperty(camera, 'perspective', this.perspective ? this.perspective.json() : undefined)\r\n    writeDefinedProperty(camera, 'orthographic', this.orthographic ? this.orthographic.json() : undefined)\r\n    writeExtensionsProperty(camera, this.extensions)\r\n    writeDefinedProperty(camera, 'extras', this.extras)\r\n\r\n    return camera\r\n  }\r\n\r\n  static fromJson(json: IGLTFCamera) {\r\n    const camera = new GLTFCamera()\r\n    camera.name = json.name\r\n    if (GLTFCameraTypeValues.includes(json.type)) {\r\n      camera.type = json.type as GLTFCameraType\r\n    }\r\n    let hasCamera = false\r\n    if (json.perspective !== undefined) {\r\n      camera.perspective = new GLTFPerspectiveCamera()\r\n      camera.perspective.yfov = json.perspective.yfov\r\n      camera.perspective.znear = json.perspective.znear\r\n      camera.perspective.aspectRatio = json.perspective.aspectRatio\r\n      camera.perspective.zfar = json.perspective.zfar\r\n      hasCamera = true\r\n    }\r\n    if (json.orthographic !== undefined) {\r\n      if (hasCamera) {\r\n        throw new Error('[GLTFCamera.readFromJson()] 已经有一个 perspective 相机了')\r\n      }\r\n      camera.orthographic = new GLTFOrthographicCamera()\r\n      camera.orthographic.xmag = json.orthographic.xmag\r\n      camera.orthographic.ymag = json.orthographic.ymag\r\n      camera.orthographic.zfar = json.orthographic.zfar\r\n      camera.orthographic.znear = json.orthographic.znear\r\n    }\r\n    camera.extras = json.extras\r\n\r\n    return camera\r\n  }\r\n}\r\n\r\nexport default GLTFCamera","import { IGLTFSkin } from \"src/interfaces/IGLTFObj\"\r\nimport writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFPropertyBase from \"./gltf-property-base\"\r\n\r\nclass GLTFSkin extends GLTFPropertyBase {\r\n  inverseBindMatrices?: number\r\n  skeleton?: number\r\n  name?: string\r\n  joints: number[]\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n  \r\n  validate() {\r\n    return this.joints.length > 1\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFSkin json()] 当前 skin 属性不合法，请检查')\r\n    }\r\n\r\n    const sk = {}\r\n\r\n    writeDefinedProperty(sk, 'inverseBindMatrices', this.inverseBindMatrices)\r\n    writeDefinedProperty(sk, 'skeleton', this.skeleton)\r\n    writeDefinedProperty(sk, 'name', this.name)\r\n    writeDefinedProperty(sk, 'joints', this.joints.length !== 0 ? this.joints : undefined)\r\n    writeExtensionsProperty(sk, this.extensions)\r\n    writeDefinedProperty(sk, 'extras', this.extras)\r\n\r\n    return sk\r\n  }\r\n\r\n  static fromJson(json: IGLTFSkin) {\r\n    const skin = new GLTFSkin()\r\n    skin.joints = json.joints\r\n    skin.name = json.name\r\n    skin.inverseBindMatrices = json.inverseBindMatrices\r\n    skin.skeleton = json.skeleton\r\n    skin.extras = json.extras\r\n    return skin\r\n  }\r\n}\r\n\r\nexport default GLTFSkin","import ISerializable from 'src/interfaces/ISerializable'\r\nimport writeDefinedProperty from 'src/utils/io/writeDefinedProperty'\r\nimport writeExtensionsProperty from 'src/utils/io/writeExtensionsProperty'\r\nimport { GLTFExtensionBase } from '../ext'\r\nimport {\r\n  GLTFAsset,\r\n  GLTFBuffer,\r\n  GLTFBufferView,\r\n  GLTFAccessor,\r\n  GLTFScene,\r\n  GLTFNode,\r\n  GLTFMesh,\r\n  GLTFMaterial,\r\n  GLTFImage,\r\n  GLTFTexture,\r\n  GLTFSampler,\r\n  GLTFAnimation,\r\n  GLTFCamera,\r\n  GLTFSkin,\r\n} from './def'\r\n\r\nclass GLTFDocument implements ISerializable {\r\n  asset: GLTFAsset = new GLTFAsset()\r\n  scene?: number = 0\r\n\r\n  buffers: GLTFBuffer[] = []\r\n  bufferViews: GLTFBufferView[] = []\r\n  accessors: GLTFAccessor[] = []\r\n\r\n  scenes: GLTFScene[] = []\r\n  nodes: GLTFNode[] = []\r\n  meshes: GLTFMesh[] = []\r\n\r\n  materials?: GLTFMaterial[]\r\n  textures?: GLTFTexture[]\r\n  images?: GLTFImage[]\r\n  samplers?: GLTFSampler[]\r\n\r\n  animations?: GLTFAnimation[]\r\n  cameras?: GLTFCamera[]\r\n  skins?: GLTFSkin[]\r\n\r\n  extensions?: Set<GLTFExtensionBase>\r\n  extras?: any\r\n  extensionsUsed?: string[]\r\n  extensionsRequired?: string[]\r\n\r\n  json() {\r\n    const gltfObj = {\r\n      asset: this.asset.json(),\r\n      buffers: this.buffers.map(buffer => buffer.json()),\r\n      bufferViews: this.bufferViews.map(bufferView => bufferView.json()),\r\n      accessors: this.accessors.map(acc => acc.json()),\r\n      \r\n      scenes: this.scenes.map(scene => scene.json()),\r\n      nodes: this.nodes.map(node => node.json()),\r\n      meshes: this.meshes.map(mesh => mesh.json()),\r\n    }\r\n    writeDefinedProperty(gltfObj, 'scene', this.scene)\r\n    writeDefinedProperty(gltfObj, 'materials', this.materials !== undefined && this.materials.length !== 0 ? this.materials.map(mt => mt.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'textures', this.textures !== undefined && this.textures.length !== 0 ? this.textures.map(tx => tx.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'images', this.images !== undefined && this.images.length !== 0 ? this.images.map(img => img.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'samplers', this.samplers !== undefined && this.samplers.length !== 0 ? this.samplers.map(spl => spl.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'cameras', this.cameras !== undefined && this.cameras.length !== 0 ? this.cameras.map(c => c.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'animations', this.animations !== undefined && this.animations.length !== 0 ? this.animations.map(ani => ani.json()) : undefined)\r\n    writeDefinedProperty(gltfObj, 'skins', this.skins !== undefined && this.skins.length !== 0 ? this.skins.map(skin => skin.json()) : undefined)\r\n\r\n    writeExtensionsProperty(gltfObj, this.extensions)\r\n    writeDefinedProperty(gltfObj, 'extras', this.extras)\r\n    writeDefinedProperty(gltfObj, 'extensionsUsed', this.extensionsUsed)\r\n    writeDefinedProperty(gltfObj, 'extensionsRequired', this.extensionsRequired)\r\n    return gltfObj\r\n  }\r\n}\r\n\r\nexport default GLTFDocument","import { ISerializable, IValidate } from \"src/interfaces\"\r\n\r\nclass GLTFExtensionBase implements IValidate, ISerializable {\r\n  protected _name: string = \"\"\r\n  get name() {\r\n    return this._name\r\n  }\r\n  \r\n  required?: boolean\r\n  used?: boolean\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    return\r\n  }\r\n}\r\n\r\nexport default GLTFExtensionBase","import { GLTFAccessor, GLTFAnimation, GLTFAsset, GLTFBuffer, GLTFBufferView, GLTFCamera, GLTFDocument, GLTFImage, GLTFMaterial, GLTFMesh, GLTFNode, GLTFSampler, GLTFScene, GLTFSkin, GLTFTexture } from \"src/gltf/core\"\r\nimport { IGLTFObj, IGLTFAccessor, IGLTFAnimation, IGLTFBuffer, IGLTFBufferView, IGLTFCamera, IGLTFImage, IGLTFMaterial, IGLTFMesh, IGLTFNode, IGLTFSampler, IGLTFScene, IGLTFSkin, IGLTFTexture } from \"src/interfaces\"\r\nimport GLTFReadType from \"src/interfaces/GLTFReadType\"\r\nimport GLTFResources from \"src/interfaces/GLTFResources\"\r\n\r\nfunction readBuffers(gltfBuffers: GLTFBuffer[], json: IGLTFBuffer[]) {\r\n  for (const bfjson of json) {\r\n    const bf = GLTFBuffer.fromJson(bfjson)\r\n    gltfBuffers.push(bf)\r\n  }\r\n}\r\n\r\nfunction readBufferViews(gltfBufferViews: GLTFBufferView[], json: IGLTFBufferView[]) {\r\n  for (const bvjson of json) {\r\n    const bv = GLTFBufferView.fromJson(bvjson)\r\n    // extensions 单独处理\r\n    gltfBufferViews.push(bv)\r\n  }\r\n}\r\n\r\nfunction readAccessors(gltfAccessors: GLTFAccessor[], json: IGLTFAccessor[]) {\r\n  for (const accjson of json) {\r\n    const acc = GLTFAccessor.fromJson(accjson)\r\n    // extensions 单独处理\r\n    gltfAccessors.push(acc)\r\n  }\r\n}\r\n\r\nfunction readScenes(gltfScenes: GLTFScene[], json: IGLTFScene[]) {\r\n  for (const scenejson of json) {\r\n    const scene = GLTFScene.fromJson(scenejson)\r\n    gltfScenes.push(scene)\r\n  }\r\n}\r\n\r\nfunction readNodes(gltfNodes: GLTFNode[], json: IGLTFNode[]) {\r\n  for (const nodejson of json) {\r\n    const node = GLTFNode.fromJson(nodejson)\r\n    gltfNodes.push(node)\r\n  }\r\n}\r\n\r\nfunction readMeshs(gltfMeshs: GLTFMesh[], json: IGLTFMesh[]) {\r\n  for (const meshjson of json) {\r\n    const mesh = GLTFMesh.fromJson(meshjson)\r\n    gltfMeshs.push(mesh)\r\n  }\r\n}\r\n\r\nfunction readTextures(gltfTextures: GLTFTexture[], json: IGLTFTexture[]) {\r\n  for (const txjson of json) {\r\n    const tx = GLTFTexture.fromJson(txjson)\r\n    gltfTextures.push(tx)\r\n  }\r\n}\r\n\r\nfunction readImages(gltfImages: GLTFImage[], json: IGLTFImage[]) {\r\n  for (const imgjson of json) {\r\n    const img = GLTFImage.fromJson(imgjson)\r\n    gltfImages.push(img)\r\n  }\r\n}\r\n\r\nfunction readMaterials(gltfMaterials: GLTFMaterial[], json: IGLTFMaterial[]) {\r\n  for (const mtrljson of json) {\r\n    const mtrl = GLTFMaterial.fromJson(mtrljson)\r\n    gltfMaterials.push(mtrl)\r\n  }\r\n}\r\n\r\nfunction readSamplers(gltfSamplers: GLTFSampler[], json: IGLTFSampler[]) {\r\n  for (const spljson of json) {\r\n    const spl = GLTFSampler.fromJson(spljson)\r\n    gltfSamplers.push(spl)\r\n  }\r\n}\r\n\r\nfunction readAnimations(gltfAnimations: GLTFAnimation[], json: IGLTFAnimation[]) {\r\n  for (const anijson of json) {\r\n    const ani = GLTFAnimation.fromJson(anijson)\r\n    gltfAnimations.push(ani)\r\n  }\r\n}\r\n\r\nfunction readSkins(gltfSkins: GLTFSkin[], json: IGLTFSkin[]) {\r\n  for (const skinjson of json) {\r\n    const skin = GLTFSkin.fromJson(skinjson)\r\n    gltfSkins.push(skin)\r\n  }\r\n}\r\n\r\nfunction readCameras(gltfCameras: GLTFCamera[], json: IGLTFCamera[]) {\r\n  for (const camerajson of json) {\r\n    const camera = GLTFCamera.fromJson(camerajson)\r\n    gltfCameras.push(camera)\r\n  }\r\n}\r\n\r\nfunction bind(doc: GLTFDocument) {\r\n  doc.asset.doc = doc\r\n  doc.buffers.forEach(bf => bf.doc = doc)\r\n  doc.bufferViews.forEach(bv => bv.doc = doc)\r\n  doc.accessors.forEach(acc => acc.doc = doc)\r\n  doc.scenes.forEach(scene => scene.doc = doc)\r\n  doc.nodes.forEach(nd => nd.doc = doc)\r\n  doc.meshes.forEach(mesh => mesh.doc = doc)\r\n  if (doc.materials)\r\n    doc.materials.forEach(mtl => mtl.doc = doc)\r\n  if (doc.textures)\r\n    doc.textures.forEach(tx => tx.doc = doc)\r\n  if (doc.images)\r\n    doc.images.forEach(img => img.doc = doc)\r\n  if (doc.samplers)\r\n    doc.samplers.forEach(spl => spl.doc = doc)\r\n  if (doc.animations)\r\n    doc.animations.forEach(ani => ani.doc = doc)\r\n  if (doc.cameras)\r\n    doc.cameras.forEach(camera => camera.doc = doc)\r\n  if (doc.skins)\r\n    doc.skins.forEach(skin => skin.doc = doc)\r\n}\r\n\r\nconst readGLTF = (json: GLTFReadType, ...resources: GLTFResources[]): GLTFDocument => {\r\n  const doc = new GLTFDocument()\r\n  let resourcesLength = resources.length\r\n  console.log(`Resources Length is ${resourcesLength}`);\r\n\r\n  let obj = json\r\n  if (typeof json === \"string\") {\r\n    obj = JSON.parse(json.trim())\r\n  }\r\n  obj = obj as IGLTFObj\r\n\r\n  doc.scene = obj['scene']\r\n  doc.asset = GLTFAsset.readFromJson(obj['asset'])\r\n  readBuffers(doc.buffers, obj['buffers'])\r\n  readBufferViews(doc.bufferViews, obj['bufferViews'])\r\n  readAccessors(doc.accessors, obj['accessors'])\r\n  readScenes(doc.scenes, obj['scenes'])\r\n  readNodes(doc.nodes, obj['nodes'])\r\n  readMeshs(doc.meshes, obj['meshes'])\r\n  if (obj['textures'] !== undefined) {\r\n    readTextures(doc.textures === undefined ? new Array<GLTFTexture>() : doc.textures, obj['textures'])\r\n  }\r\n  if (obj['images'] !== undefined) {\r\n    readImages(doc.images === undefined ? new Array<GLTFImage>() : doc.images, obj['images'])\r\n  }\r\n  if (obj['materials'] !== undefined) {\r\n    readMaterials(doc.materials === undefined ? new Array<GLTFMaterial>() : doc.materials, obj['materials'])\r\n  }\r\n  if (obj['samplers'] !== undefined) {\r\n    readSamplers(doc.samplers === undefined ? new Array<GLTFSampler>() : doc.samplers, obj['samplers'])\r\n  }\r\n  if (obj['animations'] !== undefined) {\r\n    readAnimations(doc.animations === undefined ? new Array<GLTFAnimation>() : doc.animations, obj['animations'])\r\n  }\r\n  if (obj['skins'] !== undefined) {\r\n    readSkins(doc.skins === undefined ? new Array<GLTFSkin>() : doc.skins, obj['skins'])\r\n  }\r\n  if (obj['cameras'] !== undefined) {\r\n    readCameras(doc.cameras === undefined ? new Array<GLTFCamera>() : doc.cameras, obj['cameras'])\r\n  }\r\n\r\n  bind(doc)\r\n  return doc\r\n}\r\n\r\nexport default readGLTF","type TypedArrayType =\n  | Uint8Array\n  | Uint16Array\n  | Uint32Array\n  | Int8Array\n  | Int16Array\n  | Int32Array\n  | Float32Array\n  | Float64Array;\n/**\n * 求最大最小值\n * @param {number[]} arr 数组\n * @param {boolean} [max] 若为 true 则求最大值。默认是 true。否则求最小值\n * @returns\n */\nexport function arrayMinMax(\n  arr: number[] | TypedArrayType,\n  max: boolean = true\n): number {\n  const length = arr.length;\n  if (length === 0) {\n    throw new Error(\"数组不能为空\");\n  }\n  let value = arr[0];\n  for (let i = 1; i < length; i++) {\n    const arri = arr[i];\n    if (max ? arri > value : arri < value) {\n      value = arri;\n    }\n  }\n  return value;\n}\n\nexport function strideArrayMinMax(\n  arr: number[] | TypedArrayType,\n  dimension: number = 1,\n  max: boolean = true\n): number[] {\n  const length = arr.length;\n  if (length === 0 || length % dimension !== 0) {\n    throw new Error(\n      `数组为空或数组长度 length: ${length} 不能被 stride: ${dimension} 整除`\n    );\n  }\n\n  if (dimension === 1) {\n    return [arrayMinMax(arr, max)];\n  }\n\n  const values: number[] = [];\n  const dimensionLength = length / dimension;\n  // 先求 stride 个初值\n  for (let i = 0; i < dimension; i++) {\n    values.push(arr[i]);\n  }\n  // 然后对整个数组进行遍历取最值\n  for (let j = 0; j < dimensionLength; j++) {\n    for (let k = 0; k < dimension; k++) {\n      if (max ? arr[j + k] > values[k] : arr[j + k] < values[k]) {\n        values[k] = arr[j + k];\n      }\n    }\n  }\n  return values;\n}\n","import { GLTFAttributeType, GLTFComponentType } from \"src/gltf/core\";\n\nclass GLTFVertexBufferObject {\n  name: string;\n  data: ArrayBuffer;\n  elementType: GLTFAttributeType;\n  valueType: GLTFComponentType;\n\n  constructor(options: {\n    name: string;\n    data: ArrayBuffer;\n    elementType: GLTFAttributeType;\n    valueType: GLTFComponentType;\n  }) {\n    this.name = options.name;\n    this.data = options.data;\n    this.elementType = options.elementType;\n    this.valueType = options.valueType;\n  }\n\n  getTypedArray() {\n    switch (this.valueType) {\n      case GLTFComponentType.BYTE:\n        return new Int8Array(this.data);\n      case GLTFComponentType.UNSIGNED_BYTE:\n        return new Uint8Array(this.data);\n      case GLTFComponentType.SHORT:\n        return new Int16Array(this.data);\n      case GLTFComponentType.UNSIGNED_SHORT:\n        return new Uint16Array(this.data);\n      case GLTFComponentType.UNSIGNED_INT:\n        return new Uint32Array(this.data);\n      case GLTFComponentType.FLOAT:\n        return new Float32Array(this.data);\n    }\n  }\n}\n\nexport default GLTFVertexBufferObject;\n","class TilesetExtBase {\r\n  \r\n}\r\n\r\nexport default TilesetExtBase","import IValidate from \"../../../interfaces/IValidate\";\r\n\r\nclass TileHeaderBase implements IValidate {\r\n  magic: string\r\n  version: number\r\n  byteLength: number\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileHeaderBase","import TileHeaderBase from \"../tile-header-base\";\r\n\r\nclass B3dmHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default B3dmHeader","enum FeatureTableType {\r\n  B3dm = \"b3dm\",\r\n  I3dm = \"i3dm\",\r\n  Pnts = \"pnts\",\r\n  Vctr = \"vctr\"\r\n}\r\n\r\nexport default FeatureTableType","enum TileRefine {\r\n  ADD = \"add\",\r\n  REPLACE = \"replace\"\r\n}\r\n\r\nexport default TileRefine","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\n\r\nclass FeatureTable implements IValidate {\r\n\r\n  _json: Object\r\n  _binary: Uint8Array\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  featureTableType: FeatureTableType\r\n\r\n  validate() {\r\n    return false // base class always return false.\r\n  }\r\n}\r\n\r\nexport default FeatureTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IB3dmFTJson from \"../../../../interfaces/tileset/IB3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateB3dmBatchTable(table: B3dmFeatureTable): boolean {\r\n  return table.batchLength === undefined ? false : true\r\n}\r\n\r\nfunction parse(table: B3dmFeatureTable) {\r\n  const json = table._json as IB3dmFTJson\r\n  table.batchLength = json['BATCH_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass B3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  batchLength: number\r\n  rtcCenter?: number[]\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new B3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.B3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateB3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default B3dmFeatureTable","import { IOBuffer } from \"iobuffer\"\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\nimport IBTBinaryRef from \"../../../../interfaces/tileset/IBTBinaryRef\"\r\nimport IBTJson, { BTJsonValue } from \"../../../../interfaces/tileset/IBTJson\"\r\nimport TilesetExtBase from \"../../../ext/ext-base\"\r\n\r\n/*\r\n  batchtable\r\n    json: 它有可能是n个数组，每个数组的长度等于不同瓦片的 featureTableJSON.XXXLength，b3dm 是 BATCH_LENGTH，等等：\r\n            {\r\n              \"name\": ['name1', 'name2', 'name3'],\r\n              \"height\": [10, 20, 5]\r\n            }\r\n          也有可能是对二进制 batchtable binary 的引用定义，拥有 byteOffset、componentType、type 三个属性的对象\r\n            {\r\n              \"name\": {\r\n                byteOffset: 16, // 相对于 batchtable binary body 的偏移值\r\n                type: \"SCALAR\",\r\n                componentType: \"INT\"\r\n              }\r\n            }\r\n          所以，batchtable 有一个弱点，不能用 binary 存储文本数据，因为第二种情况只允许存储 scalar、vec2、vec3、vec4 四种数值类型\r\n          不过使用 byte + scalar 的方式或许可以存储字节信息。\r\n    binary: 根据 json 中第二种定义而存储数据\r\n\r\n  扩展：层级 batchtable：\r\n    \r\n */\r\n\r\nfunction parse(table: BatchTable) {\r\n  for (const k of Object.keys(table._json)) {\r\n    table.variables.set(k, table._json[k])\r\n  }\r\n}\r\n\r\nclass BatchTable implements IValidate {\r\n\r\n  _json: IBTJson\r\n  _binary: Uint8Array\r\n\r\n  variables: Map<string, BTJsonValue> = new Map()\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  static createFromJSON(json: IBTJson, binary: Uint8Array) {\r\n    const bt = new BatchTable()\r\n    bt._json = json\r\n    bt._binary = binary\r\n\r\n    parse(bt)\r\n\r\n    return bt\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get variableNames() {\r\n    return Object.keys(this._json)\r\n  }\r\n\r\n  get variableCounts() {\r\n    return this.variableNames.length\r\n  }\r\n\r\n  getVariable(name: string) {\r\n    if (this.variables.has(name)) {\r\n      const v = this.variables.get(name)\r\n      return v\r\n    }\r\n\r\n    throw new Error(`[BatchTable getVariable()] 没有这个值：${name}。`)\r\n  }\r\n}\r\n\r\nfunction timesOperator(fn: () => void, times: number) {\r\n  for (let i = 0; i < times; i++) fn()\r\n}\r\n\r\nfunction getTimes(type: string) {\r\n  return type === \"SCALAR\" ? 1 :\r\n  type === \"VEC2\" ? 2 :\r\n  type === \"VEC3\" ? 3 :\r\n  type === \"VEC4\" ? 4 : -1\r\n}\r\n\r\nfunction getReadFunction(io: IOBuffer, componentType: string) {\r\n  return componentType === \"BYTE\" ? io.readInt8 :\r\n  componentType === \"UNSIGNED_BYTE\" ? io.readUint8 :\r\n  componentType === \"SHORT\" ? io.readInt16 :\r\n  componentType === \"UNSIGNED_SHORT\" ? io.readUint16 : \r\n  componentType === \"INT\" ? io.readInt32:\r\n  componentType === \"UNSIGNED_INT\" ? io.readUint32 :\r\n  componentType === \"FLOAT\" ? io.readFloat32 : io.readFloat64\r\n}\r\n\r\n/**\r\n * 将 BatchTableBinary 读取并转换成普通的数字数组\r\n * @param {BatchTable} table BatchTable 实例\r\n * @param {IBTBinaryRef} variable 从 BatchTable JSON 中获取的引用描述对象，可使用 BatchTable.prototype.getVariable(name) 获取\r\n * @param {number} count FeatureTable 中的 XXXLength，即每个变量有多少个数据\r\n * @returns {number[]}\r\n */\r\nexport const parseBTBinary2Array = (table: BatchTable, variable: IBTBinaryRef, count: number) => {\r\n  let hasHierarchy = false\r\n  table.extensions?.forEach(ext => {\r\n    if ('name' in ext && ext['name'] === '3DTILES_batch_table_hierarchy') {\r\n      hasHierarchy = true\r\n    }\r\n  })\r\n  if (hasHierarchy) {\r\n    return\r\n  }\r\n\r\n  const io = new IOBuffer(table._binary.buffer)\r\n  io.skip(variable.byteOffset)\r\n  const result: number[] = []\r\n\r\n  for (let i = 0; i < count; i++) {\r\n    const readFunction = getReadFunction(io, variable.componentType)\r\n    timesOperator(() => result.push(readFunction()), getTimes(variable.type))\r\n  }\r\n\r\n  return result\r\n}\r\n\r\nexport default BatchTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass I3dmHeader extends TileHeaderBase implements IValidate {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  gltfFormat: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    if (this.gltfFormat !== 0 && this.gltfFormat !== 1) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default I3dmHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport II3dmFTJson from \"../../../../interfaces/tileset/II3dmFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateI3dmBatchTable(table: I3dmFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.position !== undefined && table.positionQuantized !== undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (\r\n    (table.normalUp === undefined && table.normalRight !== undefined) ||\r\n    (table.normalRight === undefined && table.normalUp !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  if (\r\n    (table.normalUpOct32p === undefined && table.normalRightOct32p !== undefined) ||\r\n    (table.normalRightOct32p === undefined && table.normalUpOct32p !== undefined)\r\n  ) {\r\n    return false\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: I3dmFeatureTable) {\r\n  const json = table._json as II3dmFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.normalUp = json['NORMAL_UP']\r\n  table.normalRight = json['NORMAL_RIGHT']\r\n  table.normalUpOct32p = json['NORMAL_UP_OCT32P']\r\n  table.normalRightOct32p = json['NORMAL_RIGHT_OCT32P']\r\n  table.scale = json['SCALE']\r\n  table.scaleNonUniform = json['SCALE_NON_UNIFORM']\r\n  table.instancesLength = json['INSTANCES_LENGTH']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass I3dmFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  normalUp?: IFTBinaryRef\r\n  normalRight?: IFTBinaryRef\r\n  normalUpOct32p?: IFTBinaryRef\r\n  normalRightOct32p?: IFTBinaryRef\r\n  scale?: IFTBinaryRef\r\n  batchId?: IFTBinaryRef\r\n  scaleNonUniform?: IFTBinaryRef\r\n\r\n  instancesLength: number\r\n\r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  eastNorthUp?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new I3dmFeatureTable()\r\n\r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.I3dm\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateI3dmBatchTable(this)\r\n  }\r\n}\r\n\r\nexport default I3dmFeatureTable","import TileHeaderBase from \"../tile-header-base\"\r\n\r\nclass PntsHeader extends TileHeaderBase {\r\n  featureTableJSONByteLength: number\r\n  featureTableBinaryByteLength: number\r\n  batchTableJSONByteLength: number\r\n  batchTableBinaryByteLength: number\r\n  \r\n  constructor() {\r\n    super()\r\n  }\r\n}\r\n\r\nexport default PntsHeader","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IPntsFTJson from \"../../../../interfaces/tileset/IPntsFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validatePntsFeatureTable(table: PntsFeatureTable): boolean {\r\n  if (table.position === undefined && table.positionQuantized === undefined) {\r\n    return false\r\n  }\r\n  if (table.batchId !== undefined && table.batchLength === undefined) {\r\n    return false\r\n  }\r\n  if (table.positionQuantized !== undefined) {\r\n    if (table.quantizedVolumeOffset === undefined || table.quantizedVolumeScale === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: PntsFeatureTable) {\r\n  const json = table._json as IPntsFTJson\r\n  table.position = json['POSITION']\r\n  table.positionQuantized = json['POSITION_QUANTIZED']\r\n  table.rgba = json['RGBA']\r\n  table.rgb = json['RGB']\r\n  table.rgb565 = json['RGB565']\r\n  table.normal = json['NORMAL']\r\n  table.normalOct16p = json['NORMAL_OCT16P']\r\n  table.batchId = json['BATCH_ID']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n  table.quantizedVolumeOffset = json['QUANTIZED_VOLUME_OFFSET']\r\n  table.quantizedVolumeScale = json['QUANTIZED_VOLUME_SCALE']\r\n  table.constantRgba = json['CONSTANT_RGBA']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // todo\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass PntsFeatureTable extends FeatureTable implements IValidate {\r\n\r\n  position?: IFTBinaryRef\r\n  positionQuantized?: IFTBinaryRef\r\n  rgba?: IFTBinaryRef\r\n  rgb?: IFTBinaryRef\r\n  rgb565?: IFTBinaryRef\r\n  normal?: IFTBinaryRef\r\n  normalOct16p?: IFTBinaryRef\r\n\r\n  pointsLength: number\r\n  \r\n  rtcCenter?: number[]\r\n  quantizedVolumeOffset?: number[]\r\n  quantizedVolumeScale?: number[]\r\n  constantRgba?: number[]\r\n  batchId?: any\r\n  batchLength?: number\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new PntsFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Pnts\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validatePntsFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default PntsFeatureTable","import IValidate from \"../../../../interfaces/IValidate\"\r\nimport IFTBinaryRef from \"../../../../interfaces/tileset/IFTBinaryRef\"\r\nimport IVctrFTJson from \"../../../../interfaces/tileset/IVctrFTJson\"\r\n\r\nimport FeatureTableType from \"../enum/featuretable-type\"\r\nimport FeatureTable from \"./featuretable-base\"\r\n\r\nfunction validateVctrFeatureTable(table: VctrFeatureTable) {\r\n  if (table.region.length !== 6) {\r\n    return false\r\n  }\r\n  if ((<number[]>table.rtcCenter).length !== 3) {\r\n    return false\r\n  }\r\n  if (table.polygonsLength !== undefined) {\r\n    if (table.polygonCounts === undefined || table.polygonIndexCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  if (table.polylinesLength !== undefined) {\r\n    if (table.polylineCounts === undefined) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nfunction parse(table: VctrFeatureTable) {\r\n  const json = table._json as IVctrFTJson\r\n  table.region = json['REGION']\r\n  table.rtcCenter = json['RTC_CENTER']\r\n  table.polygonsLength = json['POLYGONS_LENGTH']\r\n  table.polylinesLength = json['POLYLINES_LENGTH']\r\n  table.pointsLength = json['POINTS_LENGTH']\r\n\r\n  table.polygonCounts = json['POLYGON_COUNTS']\r\n  table.polygonIndexCounts = json['POLYGON_INDEX_COUNTS']\r\n  table.polygonMinimumHeights = json['POLYGON_MINIMUM_HEIGHTS']\r\n  table.polygonMaximumHeights = json['POLYGON_MAXIMUM_HEIGHTS']\r\n\r\n  table.polylineCounts = json['POLYLINE_COUNTS']\r\n  table.polylineBatchIds = json['POLYLINE_BATCH_IDS']\r\n  table.pointBatchIds = json['POINT_BATCH_IDS']\r\n\r\n  if (json['extensions'] !== undefined) {\r\n    table.extensions = new Set()\r\n    // TODO\r\n  }\r\n  table.extras = json['extras']\r\n}\r\n\r\nclass VctrFeatureTable extends FeatureTable implements IValidate {\r\n  region: number[]\r\n  rtcCenter?: number[]\r\n  \r\n  polygonsLength?: number\r\n  polylinesLength?: number\r\n  pointsLength?: number\r\n  \r\n  polygonCounts?: IFTBinaryRef\r\n  polygonIndexCounts?: IFTBinaryRef\r\n  polygonMinimumHeights?: IFTBinaryRef\r\n  polygonMaximumHeights?: IFTBinaryRef\r\n  polygonBatchIds?: IFTBinaryRef\r\n  \r\n  polylineCounts?: IFTBinaryRef\r\n  polylineBatchIds?: IFTBinaryRef\r\n\r\n  pointBatchIds?: IFTBinaryRef\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  static createFromJSON(json: Object, binary: Uint8Array) {\r\n    const ft = new VctrFeatureTable()\r\n    \r\n    ft._json = json\r\n    ft._binary = binary\r\n    ft.featureTableType = FeatureTableType.Vctr\r\n\r\n    parse(ft)\r\n\r\n    return ft\r\n  }\r\n\r\n  validate() {\r\n    return validateVctrFeatureTable(this)\r\n  }\r\n}\r\n\r\nexport default VctrFeatureTable","export * from './gltf'\r\nexport * from './tileset'\r\nexport * from './interfaces'\r\n\r\nimport pkg from '../package.json'\r\nexport const VERSION = pkg.version","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Asset implements IValidate {\r\n  version: string\r\n  tilesetVersion?: string\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default Asset","import { IOBuffer } from 'iobuffer'\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport B3dmHeader from \"./header\"\r\nimport B3dmFeatureTable from '../featuretable/featuretable-b3dm'\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: B3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(b3dm: B3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(b3dm.header, iobuffer)\r\n\r\n  if (b3dm.byteLength % 8 != 0) {\r\n    throw new Error('[B3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(b3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(b3dm.featureTableBinaryByteLength)\r\n  b3dm.featureTable = B3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (b3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(b3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(b3dm.batchTableBinaryByteLength)\r\n    b3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass B3dm implements IValidate {\r\n  header: B3dmHeader\r\n  featureTable: B3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new B3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default B3dm","class Cmpt {\r\n\r\n}\r\n\r\nexport default Cmpt","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtBatchtableHierarchy extends TilesetExtBase {\r\n  readonly name = \"3DTILES_batch_table_hierarchy\"\r\n\r\n  load() {\r\n    \r\n  }\r\n}\r\n\r\nexport default ExtBatchtableHierarchy","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtContentGLTF extends TilesetExtBase {\r\n  readonly name = \"3DTILES_content_gltf\"\r\n}\r\n\r\nexport default ExtContentGLTF","import { GLTFPrimitiveAttribute } from \"../../core\"\r\nimport GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\nclass ExtDraco extends GLTFExtensionBase {\r\n  _name: string = \"KHR_draco_mesh_compression\"\r\n  bufferView: number\r\n  attributes: GLTFPrimitiveAttribute\r\n  /** 若只提供了 draco 压缩的部分，则必须指明在 required 列表中 */\r\n  required?: boolean\r\n  /** 若 draco 压缩的和原始数据都提供了，则只需指明在 used 列表中 */\r\n  used?: boolean\r\n\r\n  constructor() {\r\n    super()\r\n  }\r\n\r\n  validate() {\r\n    return Number.isInteger(this.bufferView) && this.bufferView > 0\r\n  }\r\n\r\n  json() {\r\n    return {\r\n      bufferView: this.bufferView,\r\n      attributes: this.attributes.json()\r\n    }\r\n  }\r\n}\r\n\r\nexport default ExtDraco","import GLTFExtensionBase from \"../gltf-extension-base\";\r\n\r\n/**\r\n * @description\r\n * 此扩展由 Facebook 提供。它作用于 `GLTFScene` 对象。\r\n * \r\n */\r\nclass ExtGeometryMetadata extends GLTFExtensionBase {\r\n  _name: string = \"FB_geometry_metadata\"\r\n  /**\r\n   * @description 当前 `GLTFScene` 总共的顶点数量（不重复，意味着只统计 primitive，不考虑 node 复用）\r\n   */\r\n  vertexCount: number\r\n  /**\r\n   * @description 当前 `GLTFScene` 总共的图元数量\r\n   */\r\n  primitiveCount: number\r\n  sceneBounds: {\r\n    min: [number, number, number] \r\n    max: [number, number, number] \r\n  }\r\n\r\n}\r\n\r\nexport default ExtGeometryMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtImplicitTiling extends TilesetExtBase {\r\n  readonly name = \"3DTILES_implicit_tiling\"\r\n}\r\n\r\nexport default ExtImplicitTiling","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtLayers extends TilesetExtBase {\r\n  readonly name = \"3DTILES_layers\"\r\n}\r\n\r\nexport default ExtLayers","import GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\n/**\r\n * @description\r\n * 此扩展由微软提出，作用于 `GLTFNode` 和 `GLTFMaterial`\r\n * 同时，要在 `GLTFNode` 的 `extras` 中附上 lod 权重数据\r\n * ``` json\r\n * \"nodes\": [\r\n *   {\r\n *     \"name\": \"High_LOD\",\r\n *     \"mesh\": 0,\r\n *     \"extensions\": {\r\n *       \"MSFT_lod\": {\r\n *         \"ids\": [ 1, 2 ]\r\n *       }\r\n *     },\r\n *     \"extras\": {\r\n *         \"MSFT_screencoverage\": [ 0.5, 0.2, 0.01 ]\r\n *     }\r\n *   },\r\n *   {\r\n *     \"name\": \"Medium_LOD\",\r\n *     \"mesh\": 1\r\n *   },\r\n *   {\r\n *     \"name\": \"Low_LOD\",\r\n *     \"mesh\": 2\r\n *   }\r\n * ]\r\n * ```\r\n */\r\nclass ExtLod extends GLTFExtensionBase {\r\n  _name: string = \"MSFT_lod\"\r\n  ids: number[]\r\n  extras: {\r\n    MSFT_screencoverage: number[]\r\n  }\r\n}\r\n\r\nexport default ExtLod","import { GLTFTextureInfo } from \"../../core\";\r\nimport GLTFExtensionBase from \"../gltf-extension-base\";\r\n\r\n/**\r\n * @description 此扩展由 adobe 提出，它解决的是 pbr 透明材质中没有表面反射的问题（玻璃完全透明，但是表面仍然是有反射的）\r\n */\r\nclass ExtMaterialsThinTransparency extends GLTFExtensionBase {\r\n  _name: string = \"ADOBE_materials_thin_transparency\"\r\n\r\n  /**\r\n   * @default 1.0\r\n   */\r\n  transmissionFactor?: number\r\n  /**\r\n   * \r\n   */\r\n  transmissionTexture?: GLTFTextureInfo[]\r\n  /**\r\n   * @description \r\n   * @default 1.33\r\n   */\r\n  ior?: number\r\n}\r\n\r\nexport default ExtMaterialsThinTransparency","import GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\n/**\r\n * @description 作用对象：GLTFBufferView 和 GLTFBuffer\r\n */\r\nclass ExtMeshOptCompression extends GLTFExtensionBase {\r\n  _name: string = \"EXT_meshopt_compression\"\r\n  buffer: number\r\n  byteOffset?: number\r\n  byteLength: number // min 1\r\n  byteStride: number // 2 ~ 256\r\n  /**\r\n   * @description \"ATTRIBUTES\", \"TRIANGLES\", \"INDICES\"\r\n   */\r\n  mode: string\r\n  count: number // min 1\r\n  /**\r\n   * @description \"NONE\", \"OCTAHEDRAL\", \"QUATERNION\", \"EXPONENTIAL\"\r\n   */\r\n  filter?: string\r\n}\r\n\r\nexport default ExtMeshOptCompression","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMetadata extends TilesetExtBase {\r\n  readonly name = \"3DTILES_metadata\"\r\n}\r\n\r\nexport default ExtMetadata","import TilesetExtBase from \"./ext-base\"\r\n\r\nclass ExtMultipleContent extends TilesetExtBase {\r\n  readonly name = \"3DTILES_multiple_contents\"\r\n}\r\n\r\nexport default ExtMultipleContent","import writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport { GLTFTextureInfo } from \"../../core\"\r\nimport GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\nclass ExtPbrSpecularGlossiness extends GLTFExtensionBase {\r\n  _name: string = \"KHR_materials_pbrSpecularGlossiness\"\r\n\r\n  diffuseFactor?: number[]\r\n  specularFactor?: number[]\r\n  glossinessFactor?: number\r\n  diffuseTexture?: GLTFTextureInfo\r\n  specularGlossinessTexture?: GLTFTextureInfo\r\n  required?: boolean\r\n  used?: boolean\r\n\r\n  validate() {\r\n    if (this.diffuseTexture !== undefined) {\r\n      return this.diffuseTexture.validate()\r\n    }\r\n    if (this.specularGlossinessTexture !== undefined) {\r\n      this.specularGlossinessTexture.validate()\r\n    }\r\n    if (this.diffuseFactor !== undefined) {\r\n      if (this.diffuseFactor.length !== 4) {\r\n        return false\r\n      }\r\n      if (this.diffuseFactor.every(v => v > 0 && v < 1)) {\r\n        return false\r\n      }\r\n    }\r\n    if (this.specularFactor !== undefined) {\r\n      if (this.specularFactor.length !== 3) {\r\n        return false\r\n      }\r\n      if (this.specularFactor.every(v => v > 1 || v < 0)) {\r\n        return false\r\n      }\r\n    }\r\n    if (this.glossinessFactor !== undefined && (this.glossinessFactor > 1 || this.glossinessFactor < 0)) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  json() {\r\n    if (this.validate() === false) {\r\n      throw new Error('[ExtPbrSpecularGlossiness json()] 当前对象的属性值不合法，请检查')\r\n    }\r\n    const ext = {}\r\n    if (this.diffuseFactor && !this.diffuseFactor.every(v => v === 1)) {\r\n      writeDefinedProperty(ext, 'diffuseFactor', this.diffuseFactor)\r\n    }\r\n    if (this.specularFactor && !this.specularFactor.every(v => v === 1)) {\r\n      writeDefinedProperty(ext, 'diffuseFactor', this.specularFactor)\r\n    }\r\n    if (this.glossinessFactor !== 1.0)\r\n      writeDefinedProperty(ext, 'glossinessFactor', this.glossinessFactor)\r\n    if (this.diffuseTexture !== undefined) {\r\n      writeDefinedProperty(ext, 'diffuseTexture', this.diffuseTexture.json())\r\n    }\r\n    if (this.specularGlossinessTexture !== undefined) {\r\n      writeDefinedProperty(ext, 'specularGlossinessTexture', this.specularGlossinessTexture.json())\r\n    }\r\n    return ext\r\n  }\r\n}\r\n\r\nexport default ExtPbrSpecularGlossiness","import TilesetExtBase from \"./ext-base\";\r\n\r\nclass ExtPntsDraco extends TilesetExtBase {\r\n  readonly name = \"3DTILES_draco_point_compression\"\r\n}\r\n\r\nexport default ExtPntsDraco","import GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\nclass ExtPrimitiveOutline extends GLTFExtensionBase {\r\n  _name: string = \"CESIUM_primitive_outline\"\r\n}\r\n\r\nexport default ExtPrimitiveOutline","import GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\n/**\r\n * @description\r\n * 此扩展允许 gltf texture 使用 dds 格式的贴图\r\n * ``` json\r\n * \"textures\": [\r\n *     {\r\n *         \"source\": 0,\r\n *         \"extensions\": {\r\n *             \"MSFT_texture_dds\": {\r\n *                 \"source\": 1\r\n *             }\r\n *         }\r\n *     }\r\n * ],\r\n * \"images\": [\r\n *     {\r\n *         \"uri\": \"defaultTexture.png\"\r\n *     },\r\n *     {\r\n *         \"uri\": \"DDSTexture.dds\"\r\n *     }\r\n * ]\r\n * ```\r\n * \r\n * 若 source 对象指向的是 bufferView，那么其 mime 需指明为 \"image/vnd-ms.dds\"\r\n * 也就是说，texture 允许超过 1 个贴图\r\n * 此扩展由微软提供\r\n */\r\nclass ExtTextureDDS extends GLTFExtensionBase {\r\n  _name: string = \"MSFT_texture_dds\"\r\n  source: number\r\n}\r\n\r\nexport default ExtTextureDDS","import GLTFExtensionBase from \"../gltf-extension-base\"\r\n\r\nclass ExtTextureWebp extends GLTFExtensionBase {\r\n  _name = \"EXT_texture_webp\"\r\n}\r\n\r\nexport default ExtTextureWebp","import { IOBuffer } from \"iobuffer\"\r\nimport { GLTFAccessor, GLTFBuffer, GLTFDocument, GLTFMaterial, GLTFMesh, GLTFNode } from \"src/gltf/core\"\r\nimport { IGLTFMaterial } from \"src/interfaces\"\r\nimport IGLTFWriteAction from \"src/interfaces/IGLTFAction\"\r\nimport { GLTFVertexAttributes, GLTFVertexIndices } from \"./action-data\"\r\n\r\n/**\r\n * GLTF 创建行为中的 `\"添加动作\"`，添加动作当前代表了一个完整的 GLTFPrimitive 的创建\r\n * 一个 `\"添加动作\"` 包含一个 vao，允许包括相对应的材质、贴图以及 gltf 扩展\r\n */\r\nclass GLTFAddAction implements IGLTFWriteAction {\r\n  readonly type = \"add\"\r\n\r\n  /** vertexArrayData */\r\n  vertexArrayData: GLTFVertexAttributes\r\n  indicesData?: GLTFVertexIndices\r\n  /** \r\n   * @todo\r\n   * 用 IGLTFMaterial 是有问题的，用户不知道索引之类的东西\r\n   */\r\n  material?: IGLTFMaterial\r\n  textureImage?: ArrayBuffer\r\n\r\n  constructor(vao: GLTFVertexAttributes, material?: IGLTFMaterial, textureImage?: ArrayBuffer) {\r\n    this.vertexArrayData = vao\r\n    this.material = material\r\n    this.textureImage = textureImage\r\n  }\r\n\r\n  submit(doc: GLTFDocument) {\r\n    try {\r\n      // 第一步 创建 accessor，更新index  <-------------- 必须创建\r\n      // TODO 针对每一个 VBO 创建自己的 accessor\r\n      const acc = GLTFAccessor.fromJson({\r\n        count: this.vertexArrayData.verticeCount,\r\n        componentType: 5126,\r\n        type: 'vec3'\r\n      })\r\n      doc.accessors.push(acc)\r\n      \r\n      \r\n      // 第二步，创建 bufferView <----------------------- 最好创建新的\r\n\r\n\r\n      // 第三步 创建 primitive -> mesh -> node\r\n      // -- primitive\r\n      const prmt = this.vertexArrayData.asPrimitive(doc)\r\n\r\n\r\n      // -- mesh\r\n      const mesh = new GLTFMesh()\r\n      mesh.primitives.push(prmt)\r\n      mesh.doc = doc\r\n      const meshid = doc.meshes.push(mesh)\r\n      // -- node\r\n      const node = new GLTFNode()\r\n      node.doc = doc\r\n      node.mesh = meshid\r\n      const nodeid = doc.nodes.push(node)\r\n      // -- update scenes.nodes \r\n      doc.scenes[doc.scene === undefined ? 0 : doc.scene].nodes.push(nodeid)\r\n\r\n\r\n      // 可选步 创建材质、纹理、贴图以及其对象\r\n      if (this.material !== undefined) {\r\n        if (doc.materials === undefined) {\r\n          doc.materials = []\r\n        }\r\n        let materialStartIndex = doc.materials.length\r\n        prmt.material = materialStartIndex\r\n        // todo!!\r\n        // material <--- 用 IGLTFMaterial 是有问题的，用户不知道索引之类的东西\r\n        doc.materials.push(GLTFMaterial.fromJson(this.material))\r\n      }\r\n      // todo\r\n      if (this.textureImage !== undefined) {\r\n        // image，即 GLTFImage 的索引号，在这一步创建完成后，要更新材质中 纹理的source\r\n        console.log('贴图功能正在开发...')\r\n      }\r\n\r\n      // 第三步 写入 buffer\r\n      // 如何写入？创建新的？跟随某个buffer？\r\n      // -- 写入分两步，先 vao，再 textureImage\r\n\r\n      /* --- 获取buffer对象 --- */\r\n      let bfData = undefined\r\n      if (doc.buffers.length === 0) {\r\n        const bfIndex = doc.buffers.push(new GLTFBuffer())\r\n        bfData = doc.buffers[bfIndex].bufferData\r\n      } else {\r\n        bfData = doc.buffers[0].bufferData\r\n      }\r\n\r\n      /* --- 写入vao --- */\r\n      if (bfData !== undefined) {\r\n        // 检查8byte对齐\r\n        const io = new IOBuffer(bfData)\r\n        this.vertexArrayData.vertexBuffers.forEach(vbo => {\r\n          io.writeBytes(new Uint8Array(vbo.buffer))\r\n          // 检查8byte对齐\r\n        })\r\n      } else {\r\n        const io = new IOBuffer()\r\n        bfData = io.buffer as ArrayBuffer\r\n      }\r\n    } catch (error) {\r\n      console.log(error)\r\n    }\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFAddAction","import { IGLTFWriteAction } from \"src/interfaces\"\r\n\r\nclass GLTFDropAction implements IGLTFWriteAction {\r\n  readonly type = \"drop\"\r\n  dropTarget: any\r\n\r\n  submit() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFDropAction","import writeDefinedProperty from \"src/utils/io/writeDefinedProperty\"\r\nimport writeExtensionsProperty from \"src/utils/io/writeExtensionsProperty\"\r\nimport GLTFTextureInfo from \"./gltf-texture-info\"\r\n\r\nclass GLTFOcclusionTextureInfo \r\nextends GLTFTextureInfo {\r\n  strength: number\r\n\r\n  constructor(index: number, texCoord: number, strength: number) {\r\n    super(index, texCoord)\r\n    this.strength = strength\r\n  }\r\n\r\n  validate() {\r\n    return (this.strength > 1 || this.strength < 0)\r\n  }\r\n\r\n  json() {\r\n    if (!this.validate()) {\r\n      throw new Error('[GLTFOcclusionTextureInfo json()] 当前 occlusion texture info 属性不合法，请检查')\r\n    }\r\n\r\n    const st = super.json()\r\n\r\n    writeDefinedProperty(st, 'strength', this.strength)\r\n    writeExtensionsProperty(st, this.extensions)\r\n    writeDefinedProperty(st, 'extras', this.extras)\r\n\r\n    return st\r\n  }\r\n}\r\n\r\nexport default GLTFOcclusionTextureInfo","import {\n  GLTFAccessor,\n  GLTFAttributeType,\n  GLTFBuffer,\n  GLTFBufferView,\n  GLTFComponentType,\n  GLTFDocument,\n  GLTFMaterial,\n  GLTFMesh,\n  GLTFNode,\n  GLTFPrimitive,\n  GLTFScene,\n} from \"src/gltf/core\";\nimport { getAttributeTypeElementCount } from \"src/gltf/core/def/enum/gltf-attribute-type\";\nimport { getComponentTypeByteSize } from \"src/gltf/core/def/enum/gltf-component-type\";\nimport { strideArrayMinMax } from \"src/utils/array-minmax\";\nimport GLTFVertexBufferObject from \"./gltf-vertex-buffer-object\";\n\nfunction contact(b1: ArrayBuffer, b2: ArrayBuffer) {\n  if (globalThis.constructor.name === \"Object\") {\n    // nodejs\n    const mergedBuffer = Buffer.concat([\n      new Uint8Array(b1),\n      new Uint8Array(b2),\n    ]);\n    return mergedBuffer.buffer;\n  } else {\n    const totalLength = b1.byteLength + b2.byteLength;\n    const mergedBuffer = new Uint8Array(totalLength);\n    mergedBuffer.set(new Uint8Array(b1), 0);\n    mergedBuffer.set(new Uint8Array(b2), b1.byteLength);\n    return mergedBuffer.buffer;\n  }\n}\n\nfunction setAttribute(\n  prmt: GLTFPrimitive,\n  name: string,\n  accessorIndex: number\n) {\n  const attrs = prmt.attributes;\n  switch (name) {\n    case \"position\":\n      attrs.position = accessorIndex;\n      break;\n    case \"uv0\":\n      attrs.uv0 = accessorIndex;\n      break;\n    case \"uv1\":\n      attrs.uv1 = accessorIndex;\n      break;\n    case \"normal\":\n      attrs.normal = accessorIndex;\n      break;\n    case \"_batchid\":\n      attrs._batchid = accessorIndex;\n      break;\n    case \"tangent\":\n      attrs.tangent = accessorIndex;\n      break;\n    case \"color0\":\n      attrs.color0 = accessorIndex;\n      break;\n    case \"weights0\":\n      attrs.weights0 = accessorIndex;\n      break;\n    case \"joints0\":\n      attrs.joints0 = accessorIndex;\n      break;\n    default:\n      break;\n  }\n}\n\nclass GLTFPrimitiveBuilder {\n  count: number;\n  vao: GLTFVertexBufferObject[] = [];\n  _mesh?: GLTFMesh;\n  _material?: GLTFMaterial;\n\n  constructor(vertexCount: number) {\n    if (!Number.isInteger(vertexCount) || vertexCount <= 0) {\n      throw new Error(\n        `[GLTFPrimitive ctor] vertexCount: ${vertexCount} 不正确`\n      );\n    }\n    this.count = vertexCount;\n  }\n\n  // 规定 position、uv0、normal 必须是 f32\n\n  setPosition(data: Float32Array) {\n    if (data.length / 3 !== this.count) {\n      return false;\n    }\n\n    const positionVBO = new GLTFVertexBufferObject({\n      name: \"position\",\n      data: data.buffer,\n      elementType: GLTFAttributeType.VEC3,\n      valueType: GLTFComponentType.FLOAT,\n    });\n    this.vao.push(positionVBO);\n    return true;\n  }\n\n  setUV0(data: Float32Array) {\n    if (data.length / 2 !== this.count) {\n      return false;\n    }\n\n    const uvVBO = new GLTFVertexBufferObject({\n      name: \"uv0\",\n      data: data.buffer,\n      elementType: GLTFAttributeType.VEC2,\n      valueType: GLTFComponentType.FLOAT,\n    });\n    this.vao.push(uvVBO);\n    return true;\n  }\n\n  setNormal(data: Float32Array) {\n    if (data.length / 3 !== this.count) {\n      return false;\n    }\n\n    const normalVBO = new GLTFVertexBufferObject({\n      name: \"normal\",\n      data: data.buffer,\n      elementType: GLTFAttributeType.VEC3,\n      valueType: GLTFComponentType.FLOAT,\n    });\n    this.vao.push(normalVBO);\n    return true;\n  }\n\n  setIndices(data: Uint8Array | Uint16Array | Uint32Array) {\n    console.log(data);\n  }\n\n  setOther(\n    vertexAttributeName: string,\n    data: ArrayBuffer,\n    dataType: GLTFAttributeType,\n    dataValueType: GLTFComponentType\n  ) {\n    const vbo = new GLTFVertexBufferObject({\n      name: vertexAttributeName,\n      data: data,\n      elementType: dataType,\n      valueType: dataValueType,\n    });\n    this.vao.push(vbo);\n  }\n\n  set mesh(value: GLTFMesh) {\n    this._mesh = value;\n  }\n\n  set material(value: GLTFMaterial) {\n    this._material = value;\n  }\n\n  submit(doc: GLTFDocument) {\n    let meshDef: GLTFMesh;\n    let nodeDef: GLTFNode | undefined;\n    let nodeIndex: number = -1;\n    const prmt = GLTFPrimitive.fromJson({\n      attributes: {\n        POSITION: -1,\n      },\n      mode: 4,\n    });\n\n    // 若没定义 mesh\n    if (this._mesh === undefined) {\n      // 创建新的 mesh 和 node 并顺次推入 doc 中\n      meshDef = GLTFMesh.fromJson({\n        primitives: [],\n      });\n      doc.meshes.push(meshDef);\n      nodeDef = GLTFNode.fromJson({\n        children: [],\n        mesh: doc.meshes.length - 1,\n        matrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n      });\n      nodeIndex = doc.nodes.push(nodeDef) - 1;\n    } else {\n      meshDef = this._mesh;\n      // 步骤1 计算 mesh 的索引号\n      let meshIdx = -1;\n      if (meshDef.doc !== undefined) {\n        let tempId = meshDef.doc.meshes.indexOf(meshDef);\n        if (tempId !== -1) {\n          meshIdx = tempId;\n        } else {\n          meshIdx = meshDef.doc.meshes.push(meshDef) - 1;\n        }\n      } else {\n        meshIdx = doc.meshes.push(meshDef) - 1;\n      }\n      // 步骤2 遍历所有 node，查找对应的 node，若无，创建新的 node\n      doc.nodes.forEach((node, index) => {\n        if (node.mesh !== undefined && node.mesh === meshIdx) {\n          nodeDef = node;\n          nodeIndex = index;\n        }\n      });\n      if (nodeDef === undefined) {\n        nodeDef = GLTFNode.fromJson({\n          children: [],\n          mesh: meshIdx,\n          matrix: [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],\n        });\n        nodeIndex = doc.nodes.push(nodeDef) - 1;\n      }\n    }\n\n    meshDef.primitives.push(prmt);\n    const scene = GLTFScene.fromJson({\n      nodes: [nodeIndex],\n    });\n    doc.scenes.push(scene);\n\n    // 创建 accessor 和 bufferView，同时推入 data 到 buffer[0]\n    this.vao.forEach((vbo, index, originArr) => {\n      const bufferView = GLTFBufferView.fromJson({\n        buffer: 0,\n        byteLength: vbo.data.byteLength,\n        byteOffset: index === 0 ? 0 : originArr[index - 1].data.byteLength,\n      });\n      const bvIdx = doc.bufferViews.push(bufferView) - 1;\n      const valueType = getComponentTypeByteSize(vbo.valueType);\n      const elementType = getAttributeTypeElementCount(vbo.elementType);\n\n      const dataTypedArray = vbo.getTypedArray();\n      const accessor = GLTFAccessor.fromJson({\n        componentType: vbo.valueType,\n        count: vbo.data.byteLength / (valueType * elementType),\n        type: vbo.elementType,\n        bufferView: bvIdx,\n        byteOffset: 0,\n        max: strideArrayMinMax(dataTypedArray, elementType, true),\n        min: strideArrayMinMax(dataTypedArray, elementType, false),\n      });\n      const accIdx = doc.accessors.push(accessor) - 1;\n      setAttribute(prmt, vbo.name, accIdx);\n\n      let bufferZero = doc.buffers[0];\n      if (bufferZero === undefined) {\n        bufferZero = GLTFBuffer.fromJson({\n          byteLength: 0,\n        });\n        doc.buffers.push(bufferZero);\n      }\n      let bufferZeroData =\n        bufferZero.bufferData === undefined\n          ? new ArrayBuffer(0)\n          : bufferZero.bufferData;\n      bufferZero.bufferData = contact(bufferZeroData, vbo.data);\n      bufferZero.byteLength += vbo.data.byteLength;\n    });\n\n    /* material 阶段 todo */\n    if (this._material !== undefined) {\n      // 获取 material 的索引\n      if (doc.materials !== undefined) {\n        const tempIdx = doc.materials.indexOf(this._material);\n        if (tempIdx !== -1) {\n          prmt.material = tempIdx;\n        } else {\n          prmt.material = doc.materials.push(this._material) - 1;\n        }\n      } else {\n        doc.materials = [];\n        prmt.material = doc.materials.push(this._material) - 1;\n      }\n\n      // 写入 image ?\n    }\n  }\n}\n\nexport default GLTFPrimitiveBuilder;\n","import { IGLTFWriteAction } from \"src/interfaces\"\r\n\r\nclass GLTFUpdateAction implements IGLTFWriteAction {\r\n  readonly type = \"update\"\r\n  updateTargetType: string\r\n  updateTargetIndex?: any\r\n\r\n  submit() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default GLTFUpdateAction","import { GLTFVertexBuffer } from \"src\"\r\nimport { GLTFDocument, GLTFPrimitive, GLTFPrimitiveAttribute, GLTFPrimitiveMode } from \"src/gltf/core\"\r\nimport { GLTFExtensionBase } from \"src/gltf/ext\"\r\nimport { IValidate } from \"src/interfaces\"\r\nimport GLTFVertexIndices from \"./gltf-vertex-indices\"\r\n\r\nfunction createAttribute(accessorStartIndex: number, vertexBuffers: GLTFVertexBuffer[]) {\r\n  const attrs = new GLTFPrimitiveAttribute()\r\n\r\n  vertexBuffers.forEach(vb => {\r\n    switch (vb.type.toString()) {\r\n      case 'position':\r\n        attrs.position = ++accessorStartIndex\r\n        break;\r\n      case 'normal':\r\n        attrs.normal = ++accessorStartIndex\r\n        break;\r\n      case 'uv0':\r\n        attrs.uv0 = ++accessorStartIndex\r\n        break;\r\n      case 'uv1':\r\n        attrs.uv1 = ++accessorStartIndex\r\n        break;\r\n      case 'joints0':\r\n        attrs.joints0 = ++accessorStartIndex\r\n        break;\r\n      case 'weights0':\r\n        attrs.weights0 = ++accessorStartIndex\r\n        break;\r\n      case 'tangent':\r\n        attrs.tangent = ++accessorStartIndex\r\n        break;\r\n      case 'color0':\r\n        attrs.color0 = ++accessorStartIndex\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  })\r\n  return attrs\r\n}\r\n\r\n/**\r\n * GLTFVertexAttributes 相对于 GLTFPrimitive 的数据本体，只不过它保存的是顶点属性的真实数据\r\n */\r\nclass GLTFVertexAttributes implements IValidate {\r\n  /**\r\n   * vertexBuffers，相当于 GLTFPrimitiveAttributes 中每一个 attribute 的数据本体\r\n   */\r\n  vertexBuffers: GLTFVertexBuffer[] = []\r\n  primitiveMode: GLTFPrimitiveMode = GLTFPrimitiveMode.TRIANGLES\r\n  extensions?: Set<GLTFExtensionBase>\r\n  /**\r\n   * indices 与 GLTFPrimitive.indices 意义相同，是索引型数据\r\n   */\r\n  indices?: GLTFVertexIndices\r\n\r\n  /**\r\n   * @todo 检测 indices 数量与 vertexBuffers 的数量关系是否正确\r\n   */\r\n  validate() {\r\n    return false\r\n  }\r\n\r\n  get verticeCount() {\r\n    if (this.vertexBuffers.length === 0) {\r\n      return 0\r\n    }\r\n    return this.vertexBuffers[0].count\r\n  }\r\n\r\n  asPrimitive(doc: GLTFDocument, materialIndex?: number) {\r\n    const prmt = new GLTFPrimitive()\r\n    prmt.material = materialIndex\r\n    prmt.attributes = createAttribute(doc.accessors.length, this.vertexBuffers)\r\n    if (this.indices !== undefined) {\r\n      prmt.indices = ++doc.accessors.length\r\n    }\r\n    prmt.mode = this.primitiveMode\r\n    prmt.doc = doc\r\n    return prmt\r\n  }\r\n}\r\n\r\nexport default GLTFVertexAttributes","import { GLTFAttributeType, GLTFComponentType, GLTFVertexAttributeType } from \"src/gltf/core\";\r\nimport { getAttributeTypeElementCount } from \"src/gltf/core/def/enum/gltf-attribute-type\";\r\nimport { getComponentTypeByteSize } from \"src/gltf/core/def/enum/gltf-component-type\";\r\n\r\nclass GLTFVertexBuffer {\r\n  type: GLTFVertexAttributeType = GLTFVertexAttributeType.POSITION\r\n  buffer: ArrayBuffer\r\n  numberType: GLTFComponentType = GLTFComponentType.FLOAT\r\n  elementType: GLTFAttributeType = GLTFAttributeType.VEC3\r\n\r\n  /**\r\n   * 计算顶点数量\r\n   */\r\n  get count() {\r\n    const cmpSize = getComponentTypeByteSize(this.numberType)\r\n    const numSize = getAttributeTypeElementCount(this.elementType)\r\n    if (this.buffer.byteLength % cmpSize * numSize !== 0) {\r\n      throw new Error('[GLTFVertexBuffer count] 数据与类型不匹配，请检查')\r\n    }\r\n    return this.buffer.byteLength / (cmpSize * numSize)\r\n  }\r\n}\r\n\r\nexport default GLTFVertexBuffer","import { GLTFComponentType } from \"src/gltf/core\"\r\n\r\nclass GLTFVertexIndices {\r\n  data: ArrayBuffer\r\n  count: number\r\n  numberType: GLTFComponentType\r\n}\r\n\r\nexport default GLTFVertexIndices","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../../gltf\"\r\nimport I3dmFeatureTable from \"../featuretable/featuretable-i3dm\"\r\nimport I3dmHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: I3dmHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n  header.gltfFormat = io.readUint32()\r\n}\r\n\r\nfunction parse(i3dm: I3dm, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(i3dm.header, iobuffer)\r\n\r\n  if (i3dm.byteLength % 8 != 0) {\r\n    throw new Error('[I3dm 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(32)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(i3dm.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(i3dm.featureTableBinaryByteLength)\r\n  i3dm.featureTable = I3dmFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (i3dm.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(i3dm.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(i3dm.batchTableBinaryByteLength)\r\n    i3dm.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n\r\n  /* TODO: Parse GLB to GLTFDocument */\r\n}\r\n\r\nclass I3dm implements IValidate {\r\n  header: I3dmHeader\r\n  featureTable: I3dmFeatureTable\r\n  batchTable?: BatchTable\r\n  externalData: string | GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  /**\r\n   *\r\n   */\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new I3dmHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get gltfFormat() {\r\n    return this.header.gltfFormat\r\n  }\r\n\r\n  get sizeWithoutExternalData() {\r\n    return 32 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default I3dm","import { IOBuffer } from \"iobuffer\"\r\n\r\nimport IValidate from \"../../../../interfaces/IValidate\"\r\n\r\nimport { GLTFDocument } from \"../../../..\"\r\nimport PntsFeatureTable from \"../featuretable/featuretable-pnts\"\r\nimport PntsHeader from \"./header\"\r\nimport { BatchTable } from \"../batchtable\"\r\n\r\nfunction parseHeader(header: PntsHeader, io: IOBuffer) {\r\n  io.rewind()\r\n  header.magic = io.readChars(4)\r\n  header.version = io.readUint32()\r\n  header.byteLength = io.readUint32()\r\n  header.featureTableJSONByteLength = io.readUint32()\r\n  header.featureTableBinaryByteLength = io.readUint32()\r\n  header.batchTableJSONByteLength = io.readUint32()\r\n  header.batchTableBinaryByteLength = io.readUint32()\r\n}\r\n\r\nfunction parse(pnts: Pnts, buffer: ArrayBuffer) {\r\n  const iobuffer = new IOBuffer(buffer)\r\n  parseHeader(pnts.header, iobuffer)\r\n\r\n  if (pnts.byteLength % 8 != 0) {\r\n    throw new Error('[Pnts 实例化错误] byteLength 未 8 字节对齐。')\r\n  }\r\n\r\n  iobuffer.rewind()\r\n  iobuffer.skip(28)\r\n  const ftJSON = JSON.parse(iobuffer.readChars(pnts.featureTableJSONByteLength))\r\n  const ftBin = iobuffer.readBytes(pnts.featureTableBinaryByteLength)\r\n  pnts.featureTable = PntsFeatureTable.createFromJSON(ftJSON, ftBin)\r\n\r\n  if (pnts.batchTableJSONByteLength !== 0) {\r\n    const btJSON = JSON.parse(iobuffer.readChars(pnts.batchTableJSONByteLength))\r\n    const btBin = iobuffer.readBytes(pnts.batchTableBinaryByteLength)\r\n    pnts.batchTable = BatchTable.createFromJSON(btJSON, btBin)\r\n  }\r\n}\r\n\r\nclass Pnts implements IValidate {\r\n  header: PntsHeader\r\n  featureTable: PntsFeatureTable\r\n  batchTable?: BatchTable\r\n  parsedGLTF: GLTFDocument\r\n  buffer?: ArrayBuffer\r\n\r\n  constructor(buffer: ArrayBuffer, cacheBuffer = false) {\r\n    this.header = new PntsHeader()\r\n    parse(this, buffer)\r\n\r\n    if (cacheBuffer === true) {\r\n      this.buffer = buffer\r\n    }\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  get magic() {\r\n    return this.header.magic\r\n  }\r\n\r\n  get byteLength() {\r\n    return this.header.byteLength\r\n  }\r\n\r\n  get version() {\r\n    return this.header.version\r\n  }\r\n\r\n  get featureTableJSONByteLength() {\r\n    return this.header.featureTableJSONByteLength\r\n  }\r\n\r\n  get featureTableBinaryByteLength() {\r\n    return this.header.featureTableBinaryByteLength\r\n  }\r\n\r\n  get batchTableJSONByteLength() {\r\n    return this.header.batchTableJSONByteLength\r\n  }\r\n\r\n  get batchTableBinaryByteLength() {\r\n    return this.header.batchTableBinaryByteLength\r\n  }\r\n\r\n  get sizeWithoutGLB() {\r\n    return 28 + \r\n    this.featureTableJSONByteLength + \r\n    this.featureTableBinaryByteLength + \r\n    this.batchTableJSONByteLength + \r\n    this.batchTableBinaryByteLength\r\n  }\r\n}\r\n\r\nexport default Pnts","import TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass Property {\r\n  maximum: number\r\n  minimum: number\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n}\r\n\r\nexport default Property","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileRefine from \"./enum/tile-refine\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\nimport TileContent from \"./tile-content\"\r\n\r\nclass Tile implements IValidate {\r\n  boundingVolume: TileBoundingVolume\r\n  geometricError: number\r\n  viewerRequestVolume?: TileBoundingVolume\r\n  refine?: TileRefine\r\n  content?: TileContent\r\n  transform?: number[] = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1] // wait to def as Mat4\r\n  children?: Tile[]\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: Object\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * @todo\r\n   */\r\n  toJson() {\r\n    if (!this.validate()) {\r\n      throw new Error('[Tile toJson()] 验证此对象失败！')\r\n    }\r\n    const obj = {}\r\n    if (this.transform !== undefined) {\r\n      Object.defineProperty(obj, 'transform', {\r\n        value: this.transform\r\n      })\r\n    }\r\n\r\n  }\r\n}\r\n\r\nexport default Tile","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\n\r\nclass TileBoundingVolume implements IValidate {\r\n  box?: number[]\r\n  region?: number[]\r\n  sphere?: number[]\r\n  extensions?: Set<TilesetExtBase>\r\n  extras?: any\r\n\r\n  validate() {\r\n    const boxExist = this.box === undefined ? 1 : 0\r\n    const regionExist = this.region === undefined ? 1 : 0\r\n    const sphereExist = this.sphere === undefined ? 1 : 0\r\n    // === 3 意思是三个都不存在\r\n    // === 2 意思是存在 1 个\r\n    // === 1 意思是存在 2 个\r\n    // === 0 意思是存在 3 个\r\n    if (boxExist + regionExist + sphereExist !== 2) {\r\n      return false\r\n    }\r\n\r\n    if ((<number[]>this.box).length != 12)\r\n      return false\r\n    if ((<number[]>this.region).length != 6)\r\n      return false\r\n    if ((<number[]>this.sphere).length != 4)\r\n      return false\r\n\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileBoundingVolume","import IValidate from \"../../../interfaces/IValidate\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport TileBoundingVolume from \"./tile-bounding-volume\"\r\n// import * as URI from 'uri-js'\r\n\r\nclass TileContent implements IValidate {\r\n  boundingVolume?: TileBoundingVolume\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n\r\n  /**\r\n   * @deprecated `TileContent.url` 已废弃，请使用 `TileContent.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n\r\n  validate() {\r\n    return true\r\n  }\r\n}\r\n\r\nexport default TileContent","import ITilesetConstructionParam from \"../../../interfaces/tileset/ITilesetConstructionParam\"\r\nimport TilesetExtBase from \"../../ext/ext-base\"\r\nimport Asset from \"./asset\"\r\nimport Property from \"./property\"\r\nimport Tile from \"./tile\"\r\n\r\nclass Tileset {\r\n  asset: Asset\r\n  root: Tile\r\n  geometricError: number\r\n  uri: string\r\n  extensions?: Set<TilesetExtBase> = new Set()\r\n  extras?: any\r\n  extensionsUsed?: string[] = []\r\n  extensionsRequired?: string[] = []\r\n  properties?: Map<any, Property>\r\n\r\n  constructor(options: ITilesetConstructionParam) {\r\n    this.root = options.root\r\n    this.geometricError = options.geometricError\r\n    this.uri = options.uri\r\n  }\r\n\r\n  /**\r\n   * @deprecated `Tileset.url` 已废弃，请使用 `Tileset.uri`\r\n   */\r\n  get url() {\r\n    return this.uri\r\n  }\r\n  set url(value: string) {\r\n    this.uri = value\r\n  }\r\n}\r\n\r\nexport default Tileset","import { IOBuffer } from \"iobuffer\"\r\nimport readGLTF from \"./read-gltf\"\r\n\r\nconst readGLB = (binary: Uint8Array | ArrayBuffer | Buffer) => {\r\n  /* read head */\r\n  const io = new IOBuffer(binary)\r\n  const magic = io.readChars(4)\r\n  if (magic !== \"gltf\") {\r\n    throw new Error(\"[readGLB()] 不是 glb 二进制\")\r\n  }\r\n  const version = io.readUint32()\r\n  if (version !== 2) {\r\n    throw new Error(\"[readGLB()] 暂不支持其他版本，仅支持 2.0 版本\")\r\n  }\r\n  const length = io.readUint32()\r\n  if (length !== binary.byteLength) {\r\n    throw new Error(\"[readGLB()] 数据长度异常\")\r\n  }\r\n  \r\n  /* read json */\r\n  const jsonByteLength = io.readUint32()\r\n  const jsonType = io.readUint32()\r\n  console.log(`数据块 1 的类型: ${jsonType} (1=json, 0=bin)`)\r\n  const jsonText = io.readChars(jsonByteLength)\r\n  const json = JSON.parse(jsonText)\r\n\r\n  /* read binarydata */\r\n  const binByteLength = io.readUint32()\r\n  const binType = io.readUint32()\r\n  console.log(`数据块 2 的类型: ${binType} (1=json, 0=bin)`)\r\n  let binarydata = undefined\r\n  try {\r\n    binarydata = io.readBytes(binByteLength)\r\n    /* read as gltfdocument */\r\n    return readGLTF(json, binarydata)\r\n  } catch {\r\n    throw new Error(\"[readGLB()] 数据长度异常，试检查 glb binary 块有无问题\")\r\n  }\r\n}\r\n\r\nexport default readGLB"],"names":["writeDefinedProperty","obj","name","data","undefined","Object","defineProperty","value","enumerable","writable","configurable","writeExtensionsProperty","exts","extObj","forEach","ext","json","GLTFPropertyBase","doc","this","_doc","[object Object]","GLTFVersion","GLTFVersionValues","freeze","values","GLTFAttributeType","GLTFAsset","super","TWO","asset","version","generator","minVersion","copyright","extras","includes","Error","GLTFAttributeTypeValues","getAttributeTypeElementCount","t","VEC2","VEC3","VEC4","MAT2","MAT3","MAT4","GLTFComponentType","GLTFComponentTypeValues","getComponentTypeByteSize","BYTE","UNSIGNED_BYTE","SHORT","UNSIGNED_SHORT","UNSIGNED_INT","GLTFAlphaMode","GLTFAlphaModeValues","GLTFFilter","GLTFFilterValues","GLTFWrapMode","GLTFWrapModeValues","GLTFPrimitiveMode","GLTFPrimitiveModeValues","GLTFVertexAttributeType","MIME","GLTFAccessorSparseIndices","componentType","validate","i","bufferView","byteOffset","extensions","accSparseIndices","GLTFAccessorSparseValues","v","vals","GLTFAccessorSparse","count","indices","sparse","readFromJson","GLTFAccessor","acc","type","max","min","normalized","chars","lookup","Uint8Array","length","charCodeAt","exports","arraybuffer","bytes","len","base64","substring","encoded1","encoded2","encoded3","encoded4","bufferLength","p","ArrayBuffer","GLTFBufferViewTarget","GLTFBuffer","url","uri","byteLength","bf","startsWith","bufferData","decode","substr","indexOf","GLTFBufferViewTargetValues","GLTFBufferView","buffer","byteStride","bv","target","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","GLTFScene","nodes","s","scene","GLTFNode","mesh","meshes","nd","flag","matrix","rotation","scale","translation","every","r","validateTransforms","weights","skin","children","Set","size","n","m","camera","node","GLTFPrimitiveAttribute","attr","position","POSITION","uv0","TEXCOORD_0","uv1","TEXCOORD_1","color0","COLOR_0","normal","NORMAL","tangent","TANGENT","joints0","JOINTS_0","weights0","WEIGHTS_0","_batchid","_BATCHID","k","GLTFPrimitive","TRIANGLES","attrName","toLowerCase","attributes","accessors","material","prmt","mode","fromJson","GLTFMesh","primitives","primitive","map","priJson","GLTFTextureInfo","index","texCoord","textureInfo","GLTFNormalTextureInfo","st","normalTextureInfo","GLTFPbr","baseColorFactor","roughnessFactor","metallicFactor","baseColorTexture","metallicRoughnessTexture","pbr","GLTFMaterial","OPAQUE","pbrMetallicRoughness","normalTexture","emissiveTexture","occlusionTexture","alphaMode","MASK","alphaCutoff","emissiveFactor","doubleSided","mtl","GLTFTexture","sampler","source","tx","scope","FastTextEncoder","utfLabel","RangeError","FastTextDecoder","options","fatal","prototype","encode","string","stream","pos","at","tlen","Math","extra","update","set","slice","out","byte1","push","byte2","byte3","codepoint","String","fromCharCode","apply","window","self","decoder","TextDecoder","encoder","TextEncoder","str","IOBuffer","dataIsGiven","lastWrittenByte","offset","dvOffset","isView","littleEndian","_data","DataView","_mark","_marks","pop","seek","available","newLength","newArray","readUint8","getInt8","getUint8","readByte","getInt16","getUint16","getInt32","getUint32","getFloat32","getFloat64","readInt8","result","readChar","utf8_1","readBytes","writeUint8","ensureAvailable","setInt8","_updateLastWrittenByte","setUint8","setInt16","setUint16","setInt32","setUint32","setFloat32","setFloat64","writeBytes","GLTFAnimationChannelTargetPath","GLTFImage","isEncodeWithUri","getImageData","buffers","bufferViews","begin","bufferdata","skip","mimeType","img","GLTFSampler","magFilter","minFilter","wrapS","wrapT","spl","GLTFAnimationChannelTargetPathValues","GLTFAnimationChannelTarget","act","path","channelTarget","GLTFAnimationChannel","ac","channel","GLTFAnimationInterpolation","GLTFAnimationInterpolationValues","GLTFAnimationSampler","as","input","output","interpolation","GLTFAnimation","channels","samplers","ani","c","GLTFCameraType","GLTFCameraTypeValues","GLTFOrthographicCamera","znear","zfar","xmag","ymag","GLTFPerspectiveCamera","yfov","aspectRatio","GLTFCamera","orthographic","perspective","hasCamera","GLTFSkin","joints","sk","inverseBindMatrices","skeleton","GLTFDocument","gltfObj","scenes","materials","mt","textures","images","cameras","animations","skins","extensionsUsed","extensionsRequired","GLTFExtensionBase","_name","readGLTF","resources","resourcesLength","console","log","JSON","parse","trim","gltfBuffers","bfjson","readBuffers","gltfBufferViews","bvjson","readBufferViews","gltfAccessors","accjson","readAccessors","gltfScenes","scenejson","readScenes","gltfNodes","nodejson","readNodes","gltfMeshs","meshjson","readMeshs","gltfTextures","txjson","readTextures","Array","gltfImages","imgjson","readImages","gltfMaterials","mtrljson","mtrl","readMaterials","gltfSamplers","spljson","readSamplers","gltfAnimations","anijson","readAnimations","gltfSkins","skinjson","readSkins","gltfCameras","camerajson","readCameras","bind","arrayMinMax","arr","arri","strideArrayMinMax","dimension","dimensionLength","j","GLTFVertexBufferObject","elementType","valueType","Int8Array","Int16Array","Uint16Array","Uint32Array","FLOAT","Float32Array","TilesetExtBase","TileHeaderBase","B3dmHeader","FeatureTableType","TileRefine","FeatureTable","B3dmFeatureTable","binary","ft","_json","_binary","featureTableType","B3dm","table","batchLength","rtcCenter","BatchTable","Map","bt","keys","variables","variableNames","variableCounts","has","get","I3dmHeader","gltfFormat","I3dmFeatureTable","I3dm","positionQuantized","normalUp","normalRight","normalUpOct32p","normalRightOct32p","scaleNonUniform","instancesLength","quantizedVolumeOffset","quantizedVolumeScale","PntsHeader","PntsFeatureTable","Pnts","rgba","rgb","rgb565","normalOct16p","batchId","pointsLength","constantRgba","VctrFeatureTable","Vctr","region","polygonsLength","polylinesLength","polygonCounts","polygonIndexCounts","polygonMinimumHeights","polygonMaximumHeights","polylineCounts","polylineBatchIds","pointBatchIds","VERSION","cacheBuffer","header","b3dm","iobuffer","io","rewind","magic","readChars","readUint32","featureTableJSONByteLength","featureTableBinaryByteLength","batchTableJSONByteLength","batchTableBinaryByteLength","ftJSON","ftBin","featureTable","createFromJSON","btJSON","btBin","batchTable","sizeWithoutGLB","Number","isInteger","diffuseTexture","specularGlossinessTexture","diffuseFactor","specularFactor","glossinessFactor","vao","textureImage","vertexArrayData","verticeCount","asPrimitive","meshid","nodeid","materialStartIndex","bfData","bfIndex","vertexBuffers","vbo","error","strength","vertexCount","positionVBO","uvVBO","normalVBO","vertexAttributeName","dataType","dataValueType","_mesh","_material","meshDef","nodeDef","nodeIndex","meshIdx","tempId","originArr","bvIdx","dataTypedArray","getTypedArray","accessor","accIdx","accessorIndex","attrs","setAttribute","bufferZero","bufferZeroData","b1","b2","globalThis","constructor","Buffer","concat","totalLength","mergedBuffer","contact","tempIdx","materialIndex","accessorStartIndex","vb","toString","createAttribute","primitiveMode","cmpSize","numberType","numSize","i3dm","sizeWithoutExternalData","pnts","transform","box","sphere","root","geometricError","jsonByteLength","jsonType","jsonText","binByteLength","binType","binarydata"],"mappings":"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"}